/		c:/workspace/beacon/esp_adaptor/src/modules/ref_data_maint_web/src/com/ssc/datamaint/controllers/AdminController.java
/		c:/workspace/beacon/esp_adaptor/src/modules/ref_data_maint_web/src/com/ssc/datamaint/controllers/ApprovalController.java
/		c:/workspace/beacon/esp_adaptor/src/modules/ref_data_maint_web/src/com/ssc/datamaint/controllers/EntityController.java
/test		c:/workspace/beacon/esp_core/src/modules/helium-test/src/com/ssc/eis/helium/testframework/HTestController.java
	/loadTest		no entitlement		public Document loadTest(@EISInject("testName") String testName) throws Exception {
	/runTest		no entitlement		public Document runTest(@EISInject("testName") String testName) throws Exception {
/admin		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/admin/AdminController.java
	/executeActions		no entitlement		public Document executeActions(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/executeActionsJSON		no entitlement		public Map<String, Object> executeActionsJSON(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, JSONObject inputJSON) throws Exception {
	/executeActions		no entitlement		public Document executeActions(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/validateChangeSet		no entitlement		public Document validateChangeSet(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/publishChangeSet		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", cs.getOwnerESPGroup());		public Document publishChangeSet(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/publishChangeSetByName		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", cs.getOwnerESPGroup());		public Document publishChangeSetByName(@EISInject Connection c, @EISInject("sm_user") String smUserId, @EISInject("changeSet") String changeSet) throws Exception {
	/publishRemoteChangeSet		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", inputCS.getOwnerESPGroup());		public Document publishRemoteChangeSet(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/isTargetReloadProgress		no entitlement		public Document isTargetReloadProgress(@EISInject(type = com.ssc.eis.util.servlets.EISInject.Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
/adhocMartRefreshController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/AdhocMartRefreshRequestController.java
	/invokeCustomRefresh		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData", martName, ENTITY_TYPE.DATAMART);		public Document invokeCustomRefresh(@EISInject Connection connection, @EISInject("martName") String martName, @EISInject("pluginName") String pluginName,@EISInject("pluginJavaClassName") String pluginJavaClassName, @EISInject("asOf") String strAsOf, @EISInject("asAtList") String strAsAtList, @EISInject("startAsOf") String strStartAsOf, @EISInject("endAsOf") String strEndAsOf, @EISInject("startAsAt") String strStartAsAt, @EISInject("endAsAt") String strEndAsAt, @EISInject("testRun") String testRun,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/advancedSearch		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/AdvanceSearchController.java
	/search		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document search(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/list		no entitlement		public Document list(Document inputDocument) throws Exception {
	/detail		no entitlement		public Document detail(@EISInject(type = EISInject.Type.ExtraPath) String datamartName) throws Exception {
/apraFeedAdapter		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/APRAController.java
	/pullDataForDal		eau.validateAdminFunction(smUserId, "Dashboard.PullDalData");		public Document pullDataForDal(@EISInject Connection dbConn, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("asOf") String asOf, @EISInject("asOfFrom") String asOfFrom, @EISInject("feedName") String feedName, @EISInject("fundType") String fundType, @EISInject("clientCode") String clientCode, @EISInject("jobPriority") String jobPriority, @EISInject("PERIOD_IND") String PERIOD_IND, @EISInject("SOURCE_SYSTEM") String SOURCE_SYSTEM, @EISInject("WHERE_CLAUSE") String WHERE_CLAUSE, @EISInject("RETV_CURR_IND_FLG") String RETV_CURR_IND_FLG, @EISInject("RETV_PRIOR_IND_FLG") String RETV_PRIOR_IND_FLG, @EISInject("RETV_PR_PR_IND_FLG") String RETV_PR_PR_IND_FLG, @EISInject("FILTER_TYPE") String FILTER_TYPE, @EISInject("FILTER_LIST") String FILTER_LIST, @EISInject("CALC_BASIS_CD") String CALC_BASIS_CD, @EISInject("XRATE_SRC_CODE") String XRATE_SRC_CODE, @EISInject("TRL_RPT_TYPE") String TRL_RPT_TYPE, @EISInject("DATE_TYPE_1") String DATE_TYPE_1, @EISInject("DATE_TYPE_2") String DATE_TYPE_2, @EISInject("DATE_TYPE_3") String DATE_TYPE_3, @EISInject("source") String source) throws Exception {
	/pullDataForAllDals		eau.validateAdminFunction(smUserId, "Dashboard.PullDalData");		public Document pullDataForAllDals(@EISInject Connection dbConn, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject String groupId, @EISInject("eventType") String eventType, @EISInject("jobPriority") String jobPriority, @EISInject("PERIOD_IND") String PERIOD_IND, @EISInject("SOURCE_SYSTEM") String SOURCE_SYSTEM, @EISInject("WHERE_CLAUSE") String WHERE_CLAUSE, @EISInject("RETV_CURR_IND_FLG") String RETV_CURR_IND_FLG, @EISInject("RETV_PRIOR_IND_FLG") String RETV_PRIOR_IND_FLG, @EISInject("RETV_PR_PR_IND_FLG") String RETV_PR_PR_IND_FLG, @EISInject("FILTER_TYPE") String FILTER_TYPE, @EISInject("FILTER_LIST") String FILTER_LIST, @EISInject("CALC_BASIS_CD") String CALC_BASIS_CD, @EISInject("XRATE_SRC_CODE") String XRATE_SRC_CODE, @EISInject("TRL_RPT_TYPE") String TRL_RPT_TYPE, @EISInject("DATE_TYPE_1") String DATE_TYPE_1, @EISInject("DATE_TYPE_2") String DATE_TYPE_2, @EISInject("DATE_TYPE_3") String DATE_TYPE_3) throws Exception {
	/pullDataForAllDalsByEvent		eau.validateAdminFunction(smUserId, "Dashboard.PullDalData");		public Document pullDataForAllDalsByEvent(@EISInject Connection dbConn, @EISInject Session session,@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject String groupId, @EISInject("eventType") String eventType, @EISInject("jobPriority") String jobPriority, @EISInject("PERIOD_IND") String PERIOD_IND, @EISInject("eventSource") String eventSource, @EISInject("SOURCE_SYSTEM") String SOURCE_SYSTEM, @EISInject("WHERE_CLAUSE") String WHERE_CLAUSE, @EISInject("RETV_CURR_IND_FLG") String RETV_CURR_IND_FLG, @EISInject("RETV_PRIOR_IND_FLG") String RETV_PRIOR_IND_FLG, @EISInject("RETV_PR_PR_IND_FLG") String RETV_PR_PR_IND_FLG, @EISInject("FILTER_TYPE") String FILTER_TYPE, @EISInject("FILTER_LIST") String FILTER_LIST, @EISInject("CALC_BASIS_CD") String CALC_BASIS_CD, @EISInject("XRATE_SRC_CODE") String XRATE_SRC_CODE, @EISInject("TRL_RPT_TYPE") String TRL_RPT_TYPE, @EISInject("DATE_TYPE_1") String DATE_TYPE_1, @EISInject("DATE_TYPE_2") String DATE_TYPE_2, @EISInject("DATE_TYPE_3") String DATE_TYPE_3) throws Exception {
	/pullDataForIndividualDal		eau.validateAdminFunction(smUserId, "Dashboard.PullDalData");		public Document pullDataForIndividualDal(@EISInject Connection dbConn, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument,@EISInject("jobPriority") String jobPriority) throws Exception {
	/pullDataForMultipleDal		eau.validateAdminFunction(smUserId, "Dashboard.PullDalData");		public Document pullDataForMultipleDal(@EISInject Connection dbConn, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument, @EISInject("jobPriority") String jobPriority) throws Exception {
/apsExtract		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/APSStatProNAVExtractController.java
	/startNAVAlertFeed		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadFeedData", "FUND_NAV_FEED", ENTITY_TYPE.DATAFEED);		public Document startNAVAlertFeed(@EISInject("folderPath") String folderPath, @EISInject("region") String region, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/startNAVAlertFeedOld		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadFeedData", "FUND_NAV_FEED", ENTITY_TYPE.DATAFEED);		public void startNAVAlertFeedOld(@EISInject("folderPath") String folderPath, @EISInject("region") String region, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/startStatProTask		eau.validateMetamodelFunction(smUserId, "Dashboard.Extracts.Generate", "STATPRO_DM_RETURNS", ENTITY_TYPE.DATAMART);		public void startStatProTask(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/allegrostartStatProTask		eau.validateMetamodelFunction(smUserId, "Dashboard.Extracts.Generate", "STATPRO_DM_RETURNS", ENTITY_TYPE.DATAMART);		public void allegrostartStatProTask(@EISInject("dayFlag") String dayFlag, @EISInject("clientName") String clientName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/startAPSExtract		eau.validateMetamodelFunction(smUserId, "Dashboard.Extracts.Generate", "DM_FUND_NAV", ENTITY_TYPE.DATAMART);		public void startAPSExtract(@EISInject("asOf") String asof,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/asatService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/AsatServiceController.java
	/getAsatTime		no entitlement		public Document getAsatTime() throws Exception {
/autosys		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/AutosysJobControlller.java
	/sendOcfCheckExecutionDtlEmail		eau.validateAdminFunction(smUserId, "Dashboard.ECF.OCFStatus");		public void sendOcfCheckExecutionDtlEmail(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject("clientName") String clientName, @EISInject("env") String env, @EISInject("hours") String hrs, @EISInject(type = Type.Header, value = "sm_user") String smUserId) {
	/postmessage		eau.disabledFunction(smUserId, null);		public void postmessage(@EISInject("eventName") String enventName, @EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/raiseOCFEvent		eau.validateAdminFunction(smUserId, "Dashboard.OCFControls");		public void raiseOCFEvent(@EISInject("eventName") String eventName, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("minute")String minute) throws Exception {
	/raiseAutosysEvent		eau.validateAdminFunction(smUserId, "Admin.RaiseAutosysEvent");		public void raiseAutosysEvent(@EISInject("eventType") String eventType, @EISInject("eventName") String eventName, @EISInject("asOfParameter") String asOfParameter, @EISInject("timeZoneName") String timeZoneName, @EISInject("timeZoneEffective") String timeZoneEffective, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/captureSystemAutosysJob		no entitlement		public void captureSystemAutosysJob(String jobType, String jobUrl){
/metamodel/category		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/BackupMetaModelController.java
	/backup		eau.disabledFunction(smUserId, "Metamodel.ManageModel");		public Document backup(@EISInject("tag") String tag,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/restore		eau.disabledFunction(smUserId, "Metamodel.ManageModel");		public Document restore(@EISInject("tag") String tag,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/businesstag		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/BusinessTagController.java
	/list		no entitlement		public Document list(Document inputDocument) throws Exception {
	/detail		no entitlement		public Document detail(@EISInject(type = EISInject.Type.ExtraPath) String businesstagName) throws Exception {
/metamodel/calculatedfield		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/CalculatedFieldUtilController.java
	/exportCalculatedField		eau.validateEmptyFunction(smUserId, null);		public Document exportCalculatedField(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportCalculatedFieldAndGenerateChangeSet		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", "Meta Model SSC");		public Document exportCalculatedFieldAndGenerateChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("generateCS") String strGenerateCS) throws Exception {
	/addCalculatedField		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", changeset.getOwnerESPGroup());		public Document addCalculatedField(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("changeSet") String changeSetName) throws Exception {
	/showConflictElement		eau.validateAdminFunction(smUserId, null);		public Document showConflictElement(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/generateDataElementChangeSet		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", "Meta Model SSC");		public Document generateDataElementChangeSet(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportSQLMartElements		eau.validateEmptyFunction(smUserId, null);		public Document exportSQLMartElements(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportConflictingSQLMartElements		eau.validateEmptyFunction(smUserId, null);		public Document exportConflictingSQLMartElements(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("strict") String strStrict) throws Exception {
/catalog		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/CatalogController.java
	/getDataVisualizerShared		eau.validateEmptyFunction(smUserId, null);		public Document getDataVisualizerShared(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getDataVisualizerReferred		eau.validateEmptyFunction(smUserId, null);		public Document getDataVisualizerReferred(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/instanceView		validateEmptyFunction(smUserId, CATALOG_CONTROLLER_LIST_CATALOG);		public Document instanceView(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/sourceView		validateEmptyFunction(smUserId, CATALOG_CONTROLLER_LIST_CATALOG);		public Document sourceView(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/extractView		validateEmptyFunction(smUserId, CATALOG_CONTROLLER_LIST_CATALOG);		public Document extractView(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getParentLineage		no entitlement		public Document getParentLineage(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getchildLineage		no entitlement		public Document getchildLineage(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getModelSummary		validateEmptyFunction(smUserId, "CatalogController.viewModelSummary");		public Document getModelSummary(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getModelDetail		validateEmptyFunction(smUserId,     "CatalogController.viewModelDetail");		public Document getModelDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/isEntitledOwnerGroups		no entitlement		public Document isEntitledOwnerGroups(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/advancedSearch		no entitlement		public Document advancedSearch(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getLineageTree		no entitlement		public JSONObject getLineageTree(@EISInject Connection connection, net.minidev.json.JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws CatalogException {
	/getExtractDetail		eu.getFunctionDetail(entDoc, "Metamodel.ViewExtract") != null StringBuilder sb = new StringBuilder();		public Document getExtractDetail(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
	/getModelProfile		no entitlement		public JSONObject getModelProfile(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
	/getProcessedRemoteInfo		no entitlement		public Document getProcessedRemoteInfo(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
	/searchObjectsModelsByCriteria		no entitlement		public JSONObject searchObjectsModelsByCriteria(@EISInject Connection connection, org.json.JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/catalogModelSearch		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/CatalogModelSearchController.java
	/advancedSearch		no entitlement		public Document advancedSearch(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getInstanceModelList		no entitlement		public JSONObject getInstanceModelList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws CatalogException {
	/searchObjectsByCriteria		no entitlement		public JSONObject searchObjectsByCriteria(org.json.JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws IllegalAccessException, NoSuchFieldException, JSONException {
/CatalogSync		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/CatalogSyncController.java
	/pullSourceModels		eau.validateEmptyFunction(smUserId, null);		public Document pullSourceModels(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Parameter, value = "instanceName") String instanceName, @EISInject(type = Type.Parameter, value = "instanceEnv") String instanceEnv, @EISInject HttpServletRequest req) throws Exception {
	/listExtracts		eau.validateEmptyFunction(smUserId, null);		public Document listExtracts(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/category		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/CategoryController.java
	/list		eau.validateEmptyFunction(smUserId, null);		public Document list( @EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/detail		eau.validateEmptyFunction(smUserId, null);		public Document detail(@EISInject(type = Type.Header, value = "sm_user") String smUserId,@EISInject(type = EISInject.Type.ExtraPath) String categoryName) throws Exception {
	/remoteDetail		eau.validateEmptyFunction(smUserId, null);		public Document remoteDetail(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
/chaining		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChainingController.java
	/initFhash		eau.validateAdminFunction(smUserId, "Admin.DataChaining");		public Document initFhash(@EISInject("mart") String mart, @EISInject("asOfFrom") String asOfFrom, @EISInject("asOfTo") String asOfTo, @EISInject("asAtFrom") String asAtFrom, @EISInject("asAtTo") String asAtTo, @EISInject("overrideFhash") String overrideFhash, @EISInject("where") String whereCondition, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/changegroup		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChangeGroupController.java
	/addChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document addChangeGroup(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/addChangeGroupWithChangeSet		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document addChangeGroupWithChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/listChangeGroups		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document listChangeGroups(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listChangeSetofGroup		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document listChangeSetofGroup(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/approveChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ChangeGroup.Approve");		public Document approveChangeGroup(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.ExtraPath) String changeGroupName) throws Exception {
	/detail		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document detail(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.ExtraPath) String changeGroupName) throws Exception {
	/detailWithLastUpdatedAt		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document detailWithLastUpdatedAt(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/updateChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document updateChangeGroup(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/removeChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document removeChangeGroup(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/moveChangeSets		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document moveChangeSets(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/validateChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document validateChangeGroup(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/publishChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document publishChangeGroup(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/validateChangeGroupViaTargetEnv		eau.validateAdminFunction(smUserId, "Metamodel.ManageChangeGroup");		public Document validateChangeGroupViaTargetEnv(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
/changegroupimport		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChangeGroupImportController.java
	/listDeployments		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document listDeployments(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/listUniqueDeployments		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document listUniqueDeployments(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/listChangeGroups		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document listChangeGroups(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/changeGroupDetail		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Document changeGroupDetail(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/importChangeGroups		eau.validateAdminFunction(smUserId, "Metamodel.ImportChangeGroup");		public Document importChangeGroups(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn, Document input) throws Exception {
/changesetCompare		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChangeSetCompareController.java
	/changeSetEnvs		eau.validateEmptyFunction(smUserId, null);		public Document changeSetEnvs( @EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId ) throws Exception {
	/changeGroupEnvs		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> changeGroupEnvs(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/unpublishedChangeGroup		eau.validateAdminFunction(smUserId, "Metamodel.ViewChangeGroup");		public Map<String, Object> unpublishedChangeGroup(@EISInject Connection connection, JSONObject inputJSON,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/unpublishedChangeset		eau.validateEmptyFunction(smUserId, null);		public Document unpublishedChangeset( Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId ) throws Exception {
	/validateChangeSets		eau.validateAdminFunction(userid, "Metamodel.ValidateChangeSet");		public Document validateChangeSets(@EISInject(type = Type.Header, value = "sm_user") String userid, Document input) throws Exception {
	/validateChangeGroup		eau.validateAdminFunction(userid, "Metamodel.ValidateChangeSet");		public Map<String, Object> validateChangeGroup(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getModels		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> getModels(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/changeset		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChangeSetController.java
	/addChangeSet		eau.validateUserManageRoles(smUserId);		public Document addChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/updateChangeSet		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", changeSet.getOwnerESPGroup());		public Document updateChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/updateChangeSetExtraAttr		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", changeSet.getOwnerESPGroup());		public Document updateChangeSetExtraAttr(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/removeChangeSet		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", changeSet.getOwnerESPGroup());		public Document removeChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/listChangeSets		eau.validateEmptyFunction(smUserId, null);		public Document listChangeSets(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listOwnerGroupChangeSets		eau.validateEmptyFunction(smUserId, null);		public Document listOwnerGroupChangeSets(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, Document inputDocument) throws Exception {
	/detail		eau.validateEmptyFunction(smUserId, null);		public Document detail(@EISInject Connection connection, @EISInject(type = EISInject.Type.ExtraPath) String changeSetName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/updateChangeSetActions		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.PublishChangeSet", cs.getOwnerESPGroup());		public Document updateChangeSetActions(@EISInject(type = EISInject.Type.Header, value = "changeSet") String changeSetName, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/getChangeSetHistory		eau.validateEmptyFunction(smUserId,null);		public Document getChangeSetHistory(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getDependentChangeSet		eau.validateAdminFunction(smUserId, "Metamodel.ValidateChangeSet");		public Document getDependentChangeSet(@EISInject Connection connection, Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/validateChangeSetViaTargetEnv		eau.validateAdminFunction(smUserId, "Metamodel.ValidateChangeSet");		public Document validateChangeSetViaTargetEnv(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/validateChangeSetWithActions		eau.validateAdminFunction(smUserId, "Metamodel.ValidateChangeSet");		public Document validateChangeSetWithActions(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/splitChangeSets		eau.validateAdminFunction(smUserId, "Metamodel.SplitChangeSet");		public Document splitChangeSets(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
/changesetimport		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChangeSetImportController.java
	/listDeployments		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document listDeployments(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/listChangeSets		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document listChangeSets(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/changeSetDetail		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document changeSetDetail(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection c, Document input) throws Exception {
	/importChangeSets		eau.validateAdminFunction(smUserId, "Metamodel.ImportChangeSet");		public Document importChangeSets(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn, Document input) throws Exception {
/channel		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ChannelController.java
	/listChannels		no entitlement		public Document listChannels(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/detail		no entitlement		public Document detail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/addChannel		no entitlement		public Document addChannel(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/updateChannel		no entitlement		public Document updateChannel(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getJobTypes		no entitlement		public Document getJobTypes(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/validateChannel		no entitlement		public Document validateChannel(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
/common		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/CommonWebServicesController.java
	/checkServiceStatus		no entitlement		public void checkServiceStatus(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) {
	/sendMail		eau.validateEmptyFunction(smUserId, null);		public void sendMail(Document inputDocument, @EISInject HttpServletRequest request ,@EISInject HttpServletResponse response,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws EntitlementException {
	/sendExtractMail		no entitlement		public void sendExtractMail(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception{
/dashboards		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DashboardController.java
	/getComments		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getComments(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/addComments		eau.validateAdminFunction(userid, "Dashboard.SLAMonitoring");		public Document addComments(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/listSodEod		eau.validateAdminFunction(userid, "Dashboard.SLAMonitoring");		public Document listSodEod(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/listPortfolio		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document listPortfolio(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/throughputResults		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document throughputResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/regionBasedStats		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document regionBasedStats(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/statusMonitorResults		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document statusMonitorResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/feedNameExceptionResults		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document feedNameExceptionResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/feedRequestExceptionResults		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document feedRequestExceptionResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/datamartRefreshExceptionResults		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document datamartRefreshExceptionResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/ssiaMonitorResults		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document ssiaMonitorResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listDeliverable		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document listDeliverable(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listEndToEndMessage		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document listEndToEndMessage(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listEndToEndMessageDetail		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document listEndToEndMessageDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/pendingExceptionEsg		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document pendingExceptionEsg(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/pendingExceptionEsp		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document pendingExceptionEsp(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listReconCode		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document listReconCode(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/reconResultList		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document reconResultList(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/reconDetail		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document reconDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/eodCompleteRowAsofnow		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document eodCompleteRowAsofnow(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getReplayFeeds		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getReplayFeeds(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, Document inputDocument) throws Exception {
	/getManualUpload		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getManualUpload(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, Document inputDocument) throws Exception {
	/regionMinBatch		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document regionMinBatch(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listRejectedMartRefresh		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document listRejectedMartRefresh(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getRejectedMartDetail		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getRejectedMartDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/updateRejectedMartToInMemory		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document updateRejectedMartToInMemory(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getClientCode		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getClientCode(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getExtractEventTypeFeedName		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getExtractEventTypeFeedName(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/checkExtractGenerationExist		eau.validateAdminFunction(userid, "Dashboard.SLAMonitoring");		public Document checkExtractGenerationExist(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/wsQueueStats		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document wsQueueStats(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getWsServers		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getWsServers(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getTimeZone		eau.validateAdminFunction(smUserId, "Dashboard.SLAMonitoring");		public Document getTimeZone(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/datamart		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DataMartController.java
	/list		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document list( @EISInject(type = com.ssc.eis.util.servlets.EISInject.Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/getMartHierarchy		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getMartHierarchy( @EISInject(type = com.ssc.eis.util.servlets.EISInject.Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.ExtraPath) String datamartName) throws Exception {
	/detail		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document detail(@EISInject(type = com.ssc.eis.util.servlets.EISInject.Type.Header, value = "sm_user") String smUserId,@EISInject(type = EISInject.Type.ExtraPath) String datamartName) throws Exception {
	/remoteDetail		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document remoteDetail(@EISInject(type = com.ssc.eis.util.servlets.EISInject.Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/elementReference		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document elementReference(@EISInject(type = EISInject.Type.ExtraPath) String datamartName,@EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/elementReferenceList		eau.validateAdminFunction(smUserId, "Metamodel.View");		public void elementReferenceList(@EISInject(type = EISInject.Type.ExtraPath) String datamartName, @EISInject HttpServletResponse response,@EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getKeys		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getKeys(Document inputDocument,@EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getMySSReports		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getMySSReports(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getMySSDashboards		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getMySSDashboards(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportToExcel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public void exportToExcel(@EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @QueryParam("dataMartName") @EISInject("dataMartName") String dataMartName, @EISInject HttpServletRequest req, @EISInject HttpServletResponse res,@EISInject Connection dbCon,@QueryParam("changeSetName") @EISInject("changeSetName") String changeSetName) throws Exception {
/dmRefresh		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DataMartRefreshController.java
	/loadLogicalTable		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.UploadCategoryData", table.getOwnerRole());		public void loadLogicalTable(@EISInject("tableName") String logicalTableName, @EISInject("rowType") String strRowType, @EISInject("source") String source, @EISInject HttpServletRequest req,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/submitAsAt		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData",martName,ENTITY_TYPE.DATAMART);		public void submitAsAt(@EISInject("refreshPath") String refreshPath, @EISInject("asAt") String strAsAt, @EISInject("martName") String martName, @EISInject("rowType") String strRowType, @EISInject("requestId") String strRequestId, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/processFailed		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public void processFailed(@EISInject("refreshPath") String refreshPath, @EISInject("fromAsAt") String strFromAsAt, @EISInject("toAsAt") String strToAsAt, @EISInject("filterCondition") String filterCondition, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/checkMartRefreshFor		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData",martName,ENTITY_TYPE.DATAMART);		public void checkMartRefreshFor(@EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("asAt") String strAsAt, @EISInject("effector") String effector, @EISInject("refreshStart") String refreshStart, @EISInject("refreshEnd") String refreshEnd, @EISInject HttpServletResponse resp,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/primeCache		no entitlement		public String primeCache(@EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("sort") String sort) throws Exception {
	/processManualRefresh		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData",martName,ENTITY_TYPE.DATAMART);		public Document processManualRefresh( @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("asOfFrom") String strAsOfFrom, @EISInject("asAt") String strAsAt, @EISInject("asAtFrom") String strAsAtFrom, @EISInject("where") String whereClause, @EISInject("parameters") String parameters, @EISInject("subsequentRefresh") String strSubsequentRefresh) throws Exception {
	/loadQ1RowsOld		no entitlement		public String loadQ1RowsOld(@EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("asAt") String strAsAt, @EISInject("where") String whereClause, @EISInject("extraPara") String extraPara, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("testMode") String testMode) throws Exception {
	/loadQ1Rows		eau.validateAdminFunction(smUserId, "Admin.ManualRefresh");		public String loadQ1Rows(@EISInject Connection conn, @EISInject Session session, @EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("asAt") String strAsAt, @EISInject("where") String whereClause, @EISInject("parameters") String parameters, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/loadQ1RowsWithParams		no entitlement		public String loadQ1RowsWithParams(@EISInject Connection conn, @EISInject Session session, @EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("asAt") String strAsAt, @EISInject("where") String whereClause, @EISInject("extraPara") String extraPara, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/loadQ1RowsWithTruncateOption		no entitlement		public String loadQ1RowsWithTruncateOption(@EISInject Connection conn, @EISInject Session session, @EISInject("martName") String martName, @EISInject("asOf") String strAsOf, @EISInject("asAt") String strAsAt, @EISInject("where") String whereClause, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/loadQ2Rows		no entitlement		public String loadQ2Rows(@EISInject("martName") String martName, @EISInject("asOfFrom") String strAsOfFrom, @EISInject("asOf") String strAsOf, @EISInject("asAtFrom") String strAsAtFrom, @EISInject("asAt") String strAsAt, @EISInject("where") String whereClause, @EISInject("testMode") String testMode) throws Exception {
	/martRefreshAsBatch		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData",martName,ENTITY_TYPE.DATAMART);		public void martRefreshAsBatch(@EISInject("martName") String martName, @EISInject("asOfFrom") String strAsOfFrom, @EISInject("asOf") String strAsOf, @EISInject("asAtFrom") String strAsAtFrom, @EISInject("asAt") String strAsAt, @EISInject("step") String strStep, @EISInject("where") String whereClause, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/isPrimaryParent		no entitlement		public void isPrimaryParent(@EISInject("martName") String martName, @EISInject("parentName") String parentName, @EISInject HttpServletResponse resp) throws Exception {
	/isJoinedParent		no entitlement		public void isJoinedParent(@EISInject("martName") String martName, @EISInject("parentName") String parentName, @EISInject HttpServletResponse resp) throws Exception {
	/checkMartRefreshJobs		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public void checkMartRefreshJobs(@EISInject("fromAsAt") String strFromAsAt, @EISInject("toAsAt") String strToAsAt,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/createManualMartRefreshJobsEndPoint		no entitlement		public Document createManualMartRefreshJobsEndPoint() throws Exception {
	/createMartRefreshJobs		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData",feedName,ENTITY_TYPE.DATAFEED);		public Document createMartRefreshJobs(@EISInject("asAt") String strAsAt, @EISInject("feedName") String feedName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getSecondLevelJoins		no entitlement		public void getSecondLevelJoins(@EISInject HttpServletResponse resp) throws Exception {
	/checkCalculatedElements		no entitlement		public Document checkCalculatedElements() throws Exception {
	/checkCalculatedElementDataTypes		no entitlement		public Document checkCalculatedElementDataTypes(@EISInject("logicalTable") String logicalTable) throws Exception {
	/getPersistentDependents		no entitlement		public Document getPersistentDependents(@EISInject("logicalTable") String logicalTable) throws Exception {
	/getDependents		no entitlement		public Document getDependents(@EISInject("logicalTable") String logicalTable) throws Exception {
	/checkKeywordUsage		no entitlement		public Document checkKeywordUsage(@EISInject("keywordsList") String strKeywordsList) throws Exception {
/dbDeployValidate		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DBDeployController.java
	/compareDBObjects		no entitlement		public Document compareDBObjects(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/dbObjectCompare		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DbObjectCompareController.java
	/compareDBObjects		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document compareDBObjects(Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getDBObjectDetail		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getDBObjectDetail(Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/dbScriptController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DBObjectController.java
	/viewEspTableXml		no entitlement		public Document viewEspTableXml(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws IOException, ParserConfigurationException, SAXException {
	/getEspTableXml		no entitlement		public void getEspTableXml(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws IOException {
/dbview		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DBViewController.java
	/viewSql		eau.validateAdminFunction(smUserId, "Metamodel.Hint.DBView");		public Document viewSql(@EISInject(type = EISInject.Type.ExtraPath) String martName,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/debug		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DebugController.java
	/detail		disabledFunction(userId, "Metamodel.ManageDataMart");		public Document detail(@EISInject(type = EISInject.Type.ExtraPath) String objectPath, @EISInject(type = Type.Header, value = "sm_user") String userId) throws Exception {
/event/checkListBuilder		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DependencyBuilderController.java
	/getChecklistVisualiser		disabledFunction(userid, "ECF");		public Map<String, Object> getChecklistVisualiser(@EISInject Connection espConn, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/checkListXML		no entitlement		public Map<String, Object> checkListXML(@EISInject Connection espConn, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/editChecklist		disabledFunction(userid, "ECF");		public Map<String, Object> editChecklist(@EISInject Connection espConn, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveVisualiserChecklist		disabledFunction(userid, "ECF");		public Map<String, Object> saveVisualiserChecklist(@EISInject Connection espConn, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/metamodel/editor		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DesignEditorController.java
	/saveData		eau.validateEmptyFunction(userid, "DesignEditorController.saveData");		public Map<String, Object> saveData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getSaveDrafts		eau.validateEmptyFunction(userid, "DesignEditorController.getSaveDrafts");		public Map<String, Object> getSaveDrafts(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.ExtraPath) String designName) throws Exception {
	/getEntityDetailsEditor		eau.validateEmptyFunction(userid, "DesignEditorController.getEntityDetailsEditor");		public Map<String, Object> getEntityDetailsEditor(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getEntityDetailsEditorLatest		eau.validateEmptyFunction(userid, "DesignEditorController.getEntityDetailsEditor");		public Map<String, Object> getEntityDetailsEditorLatest(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveDesignFileUpload		eau.validateAdminFunction(userid, "Dashboard.FileUpload");		public JSONObject saveDesignFileUpload(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject("feedFile") FileItem feedFile, @EISInject("charset") String strCharset) throws Exception {
	/downloadAttachmentFromEditorHistory		no entitlement		public void downloadAttachmentFromEditorHistory(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
	/getDesignsHistoryChangeset		eau.validateEmptyFunction(userid, null);		public Map<String, Object> getDesignsHistoryChangeset(@EISInject Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.ExtraPath) String cName) throws Exception {
	/getDesignsHistory		eau.validateEmptyFunction(userid, null);		public Map<String, Object> getDesignsHistory(@EISInject Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEditlists		eau.validateAdminFunction(userid, "DataUI.Add");		public Map<String, Object> getEditlists(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/compareHistory		eau.validateEmptyFunction(userid, "DesignEditorController.compareHistory");		public Map<String, Object> compareHistory(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.ExtraPath) String id) throws Exception {
	/fileHistory		eau.validateEmptyFunction(userid, "DesignEditorController.fileHistory");		public Map<String, Object> fileHistory(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.ExtraPath) String id) throws Exception {
	/getIdforApprove		eau.validateEmptyFunction(userid, "DesignEditorController.getIdforApprove");		public Map<String, Object> getIdforApprove(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/setIdforReject		eau.validateAdminFunction(userid, "Metamodel.ApproveDesignData");		public Map<String, Object> setIdforReject(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, JSONObject inputJSON) throws Exception {
	/unpublishedCategory		eau.validateEmptyFunction(userid, "DesignEditorController.unpublishedCategory");		public Map<String, Object> unpublishedCategory(Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.ExtraPath) String changesetName) throws Exception {
	/saveTableData		eau.validateAdminFunction(smUserId, "Metamodel.ApproveDesignData");		public Document saveTableData(@EISInject Connection dbCon, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser) throws Exception {
	/saveTableDataWithFeed		eau.validateAdminFunction(smUserId, "Metamodel.ApproveDesignData");		public Document saveTableDataWithFeed(@EISInject Connection dbCon, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser) throws Exception {
	/getEditlistsTest		eau.validateAdminFunction(userid, "DataUI.Add");		public Map<String, Object> getEditlistsTest(Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = Type.ExtraPath) String designName) throws Exception {
/metamodel/designer		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/DesignerController.java
	/getDesigns		eau.validateEmptyFunction(userid, null);		public Map<String, Object> getDesigns(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getDesignDetails		eau.validateAdminFunction(userid, "Metamodel.View");		public Map<String, Object> getDesignDetails(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject(type = EISInject.Type.ExtraPath) String name) throws Exception {
	/saveDesignsChangeSet		eau.validateEmptyFunction(userid, "DesignController.saveDesignsChangeSet");		public Map<String, Object> saveDesignsChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getBeforeChangeDetails		eau.validateEmptyFunction(userid, "DesignController.getBeforeChangeDetails");		public Map<String, Object> getBeforeChangeDetails(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/ecf/checkList		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ECFCheckListControler.java
	/saveCheckList		disabledFunction(userid, "ECF");		public Map<String, Object> saveCheckList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getOnlyCheckList		disabledFunction(userid, "ECF");		public Map<String, Object> getOnlyCheckList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getCheckList		disabledFunction(userid, "ECF");		public Map<String, Object> getCheckList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/removeOcfChecksFromChecklist		no entitlement		public Map<String, Object> removeOcfChecksFromChecklist(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getListByType		disabledFunction(userid, "ECF");		public Map<String, Object> getListByType(@EISInject Connection connection, JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/removeControls		disabledFunction(userid, "ECF");		public Map<String, Object> removeControls(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/removeChecklists		disabledFunction(userid, "ECF");		public Map<String, Object> removeChecklists(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/seedECFCheckListRows		disabledFunction(userid, "ECF");		public Document seedECFCheckListRows(@EISInject Connection connection, @EISInject("asOf") String strAsOf, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getOCFChecks		disabledFunction(userid, "ECF");		public Map<String, Object> getOCFChecks(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject Connection conn) throws Exception {
	/getECFServices		disabledFunction(userid, "ECF");		public Map<String, Object> getECFServices(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getCheckListStatus		disabledFunction(userid, "ECF");		public Document getCheckListStatus(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/flipCheckListStatus		disabledFunction(userid, "ECF");		public Document flipCheckListStatus(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getManualControlList		disabledFunction(userid, "ECF");		public Map<String, Object> getManualControlList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveManualControl		disabledFunction(userid, "ECF");		public Map<String, Object> saveManualControl(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getEcfSupplimentalList		disabledFunction(userid, "ECF");		public Map<String, Object> getEcfSupplimentalList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/teamList		disabledFunction(userid, "ECF");		public Map<String, Object> teamList(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAllAvailableUsers		disabledFunction(userid, "ECF");		public Map<String, Object> getAllAvailableUsers(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getTeamInfo		disabledFunction(userid, "ECF");		public Map<String, Object> getTeamInfo(JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/updateTeamInfo		disabledFunction(userid, "ECF");		public Map<String, Object> updateTeamInfo(JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/downloadAttachmentFromHistory		no entitlement		public void downloadAttachmentFromHistory(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
	/saveECFMonitorComments		no entitlement		public Map<String, Object> saveECFMonitorComments(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveECFMonitorCommentsFileUpload		eau.validateAdminFunction(userid, "Dashboard.FileUpload");		public JSONObject saveECFMonitorCommentsFileUpload(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject("feedFile") FileItem feedFile, @EISInject("charset") String strCharset) throws Exception {
	/triggerOcfChecks		no entitlement		public Map<String, Object> triggerOcfChecks(@EISInject Connection connection,JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws SQLException{
	/getECFMonitorCommentsHistory		no entitlement		public Map<String, Object> getECFMonitorCommentsHistory(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveGridConfigData		no entitlement		public Map<String, Object> saveGridConfigData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveToGridConfigData		no entitlement		public Map<String, Object> saveToGridConfigData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getDashBoardConfig		no entitlement		public Map<String, Object> getDashBoardConfig(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getDashboardDetails		disabledFunction(userid, "ECF");		public Map<String, Object> getDashboardDetails(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getFailedOCFControls		disabledFunction(userid, "ECF");		public Map<String, Object> getFailedOCFControls(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getClientMap		no entitlement		public Map<String, Object> getClientMap(@EISInject(type = Type.Header, value = "sm_user") String userid) {
	/getAllDistinctUsers		disabledFunction(userid, "ECF");		public Map<String, Object> getAllDistinctUsers(JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getDashboardPastDueDetails		disabledFunction(userid, "ECF");		public Map<String, Object> getDashboardPastDueDetails(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFIDCClassificationsList		disabledFunction(userid, "ECF");		public Map<String, Object> getECFIDCClassificationsList(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/saveECFIDCClassification		disabledFunction(userid, "ECF");		public Map<String, Object> saveECFIDCClassification(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getECFIDCClassificationByType		disabledFunction(userid, "ECF");		public Map<String, Object> getECFIDCClassificationByType(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/exportChecklist		no entitlement		public void exportChecklist( @EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws SQLException {
	/getECFDeliverablesByJSON		disabledFunction(userid, "ECF");		public Map<String, Object> getECFDeliverablesByJSON(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject Connection connection,JSONObject inputJSON) throws Exception {
	/getChecklistNames		no entitlement		public Map<String, Object> getChecklistNames(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getDependentControlStatus		no entitlement		public Map<String, Object> getDependentControlStatus(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/ecf		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ECFControler.java
	/getEntityDefinition		disabledFunction(userid, "ECF");		public Document getEntityDefinition(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getEntityData		disabledFunction(userid, "ECF");		public Document getEntityData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getServiceList		disabledFunction(userid, "ECF");		public Document getServiceList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getServiceListExtract		disabledFunction(userid, "ECF");		public Document getServiceListExtract(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getServiceListWithAccountMap		disabledFunction(userid, "ECF");		public Document getServiceListWithAccountMap(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/serviceDependenciesMap		disabledFunction(userid, "ECF");		public Document serviceDependenciesMap(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/saveService		disabledFunction(userid, "ECF");		public Document saveService(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/initECFSeedRows		disabledFunction(userid, "ECF");		public Document initECFSeedRows(@EISInject("asOf") String strAsOf, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/__initECFSeedRows		disabledFunction(userid, "ECF");		public Document __initECFSeedRows(@EISInject("asOf") String strAsOf, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/updateECFSeedRows		disabledFunction(userid, "ECF");		public Document updateECFSeedRows(@EISInject("asOf") String strAsOf, @EISInject("region") String strRegion, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/__updateECFSeedRows		disabledFunction(userid, "ECF");		public Document __updateECFSeedRows(@EISInject("asOf") String strAsOf, @EISInject("region") String strRegion, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/invokeECFNotificationsHandler		disabledFunction(userid, "ECF");		public Document invokeECFNotificationsHandler(@EISInject("asOf") String strAsOf, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/callPerfClose		disabledFunction(userid, "ECF");		public Document callPerfClose(@EISInject("asAt") String strAsAt, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/saveTag		disabledFunction(userid, "ECF");		public Document saveTag(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getServiceDetail		disabledFunction(userid, "ECF");		public Document getServiceDetail(@EISInject Connection connection, @EISInject(type = EISInject.Type.ExtraPath) String serviceID, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getComment		disabledFunction(userid, "ECF");		public Document getComment(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAccountByStatusSummary		disabledFunction(userid, "ECF");		public Document getAccountByStatusSummary(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAccountByServiceSummary		disabledFunction(userid, "ECF");		public Document getAccountByServiceSummary(@EISInject Connection connection, Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAccountByStatusDetail		disabledFunction(userid, "ECF");		public Document getAccountByStatusDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getOdsAccounts		disabledFunction(userid, "ECF");		public Document getOdsAccounts(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getCategoryChildMarts		disabledFunction(userid, "ECF");		public Document getCategoryChildMarts(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEffector		disabledFunction(userid, "ECF");		public Document getEffector(@EISInject Connection connection, @EISInject(type = EISInject.Type.ExtraPath) String martName, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/addComment		disabledFunction(userid, "ECF");		public Document addComment(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFPKGList		disabledFunction(userid, "ECF");		public Document getECFPKGList(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFTableMetaData		disabledFunction(userid, "ECF");		public Document getECFTableMetaData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFPKGDetail		disabledFunction(userid, "ECF");		public Document getECFPKGDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFRPTList		disabledFunction(userid, "ECF");		public Document getECFRPTList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFRPTDetail		disabledFunction(userid, "ECF");		public Document getECFRPTDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFAcctServiceMappingWarnings		disabledFunction(userid, "ECF");		public Document getECFAcctServiceMappingWarnings(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAllECFAcctServiceMappingWarnings		disabledFunction(userid, "ECF");		public Document getAllECFAcctServiceMappingWarnings(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEcfAcctServicePkgDetail		disabledFunction(userid, "ECF");		public Document getEcfAcctServicePkgDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/saveECFAccountServiceMapping		disabledFunction(userid, "ECF");		public Document saveECFAccountServiceMapping(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFAcctServiceMapSlaDetail		disabledFunction(userid, "ECF");		public Document getECFAcctServiceMapSlaDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAllECFAccountServiceMapping		disabledFunction(userid, "ECF");		public Document getAllECFAccountServiceMapping(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFAccountServicePkgMapping		disabledFunction(userid, "ECF");		public Document getECFAccountServicePkgMapping(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFAccountServiceMapping		disabledFunction(userid, "ECF");		public Document getECFAccountServiceMapping(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getECFSupplementalList		disabledFunction(userid, "ECF");		public Document getECFSupplementalList(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.ExtraPath) String ecfRPTID, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/updateComment		disabledFunction(userid, "ECF");		public Document updateComment(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/deleteComment		disabledFunction(userid, "ECF");		public Document deleteComment(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/populatePDMTables		disabledFunction(userid, "ECF");		public Document populatePDMTables(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject("feedFile") FileItem feedFile,@EISInject("uploadType") String uploadType) throws Exception {
	/saveExtractServiceMappings		disabledFunction(userid, "ECF");		public Document saveExtractServiceMappings(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/savePackageServiceMappings		no entitlement		public Document savePackageServiceMappings(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/savePackageServiceMappings		no entitlement		public Document savePackageServiceMappings(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getAccountStatusAttrsHistory		disabledFunction(userid, "ECF");		public Document getAccountStatusAttrsHistory(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/flipToClosedAndUpdateAccountAttrs		disabledFunction(userid, "ECF");		public Document flipToClosedAndUpdateAccountAttrs(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/updateAccountAttrs		disabledFunction(userid, "ECF");		public Document updateAccountAttrs(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getAccountPackage		disabledFunction(userid, "ECF");		public Document getAccountPackage(@EISInject Connection connection, @EISInject(type = EISInject.Type.ExtraPath) String espAccountCode, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getPortfolioStatus		disabledFunction(userid, "ECF");		public Document getPortfolioStatus(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/flipExtractStatus		disabledFunction(userid, "ECF");		public Document flipExtractStatus(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getExtractStatus		disabledFunction(userid, "ECF");		public Document getExtractStatus(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getExtractByStatusSummary		disabledFunction(userid, "ECF");		public Document getExtractByStatusSummary(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getPackageByStatusSummary		disabledFunction(userid, "ECF");		public Document getPackageByStatusSummary(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getPackageDue		disabledFunction(userid, "ECF");		public Document getPackageDue(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/populateIRDReportMetaData		disabledFunction(userid, "ECF");		public Document populateIRDReportMetaData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/autoPopulateCIRWorkFlowConfig		disabledFunction(userid, "ECF");		public Document autoPopulateCIRWorkFlowConfig(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/populateCIRWorkFlowConfig		disabledFunction(userid, "ECF");		public Document populateCIRWorkFlowConfig(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/populateExtractDeliverables		disabledFunction(userid, "ECF");		public Document populateExtractDeliverables(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getDefaultEffetiveDate		disabledFunction(userid, "ECF");		public Document getDefaultEffetiveDate(Document request, @EISInject(type = Type.Header, value = "sm_user") String userid)throws Exception {
/operationsEcfDashboard		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EcfDashboardController.java
	/seedOperationsMonitor		disabledFunction(smUserId, "EcfDashboardController.seedOperationsMonitor");		public Document seedOperationsMonitor(@EISInject("asof") String asof,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/ecf/team		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ECFTeamController.java
	/list		disabledFunction(userid, "ECF");		public Map<String, Object> list( JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
/metamodel/element		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ElementController.java
	/list		no entitlement		public Document list(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/detail		validateMetamodelFunctionViaModel(smUserId, "Metamodel.View", element.getOwnerRole());		public Document detail(@EISInject(type = Type.Header, value = "sm_user") String smUserId,@EISInject(type = EISInject.Type.ExtraPath) String elementName,@EISInject("fetchElementReference") String fetchElementReference) throws Exception {
	/parseGovImportElementsFile		validateMetamodelFunctionViaModel(smUserId, "Metamodel.ManageElement", cs.getOwnerESPGroup());		public Document parseGovImportElementsFile( @EISInject Connection connection, @EISInject("userId") String smUserId, @EISInject("changeSet") String changeSetName, @EISInject("fileName") String fileName, @EISInject("fileContent") FileItem elementFile) throws Exception {
	/parseImportElementsFile		validateMetamodelFunctionViaModel(smUserId, "Metamodel.ManageElement", cs.getOwnerESPGroup());		public Document parseImportElementsFile( @EISInject Connection connection, @EISInject("userId") String smUserId, @EISInject("changeSet") String changeSetName, @EISInject("fileName") String fileName, @EISInject("fileContent") FileItem elementFile) throws Exception {
	/importElementToChangeSet		validateMetamodelFunctionViaModel(smUserId, "Metamodel.ManageElement", cs.getOwnerESPGroup());		public Document importElementToChangeSet(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Header, value = "changeSet") String changeSetName, Document inputDocument) throws Exception {
	/exportElement		validateEmptyFunction(userid, "exportElement");		public void exportElement(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception{
	/downloadElementTemplate		validateEmptyFunction(smUser, "exportElement");		public void downloadElementTemplate(@EISInject("fileName") String fileName, @EISInject HttpServletRequest req, @EISInject HttpServletResponse resp, @EISInject(type = Type.Header, value = "sm_user") String smUser) throws Exception {
	/listSimplified		validateAdminFunction(smUserId, "Metamodel.View");		public Document listSimplified(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
/voltageEncryption		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EncryptDataVoltageController.java
	/encryptData		disabledFunction(smUserId, "voltageEncryption");		public void encryptData(@EISInject Connection dbConn, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("element") String elementName, @EISInject("category") String category, @EISInject("year") String year, @EISInject("threadCount") String noOfThreads) throws Exception {
	/decryptData		disabledFunction(smUserId, "voltageEncryption");		public void decryptData(@EISInject Connection dbConn, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("element") String elementName, @EISInject("category") String category, @EISInject("year") String year, @EISInject("threadCount") String noOfThreads) throws Exception {
/entitlements		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EntitlementController.java
	/getIsShellAppRole		validateEmptyFunction(smUserId, "Entitlement");		public Document getIsShellAppRole(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getEntitlementValueGroups		validateEmptyFunction(smUserId, "Entitlement");		public Document getEntitlementValueGroups(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getEntitlementValues		validateEmptyFunction(smUserId, "Entitlement");		public Document getEntitlementValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getEntitlementValuesJSON		validateEmptyFunction(smUserId, "Entitlement");		public Map<String, Object> getEntitlementValuesJSON(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getFeatureMappedRoles		validateEmptyFunction(smUserId, "Entitlement");		public Document getFeatureMappedRoles(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getEntitlementFeatureRoleMapping		validateEmptyFunction(smUserId, "Entitlement");		public Document getEntitlementFeatureRoleMapping(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/saveEntitlementRoleFeaturesMapping		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document saveEntitlementRoleFeaturesMapping(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getEntitledOwnerGroups		validateEmptyFunction(smUserId, "Entitlement");		public Document getEntitledOwnerGroups(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getEntitlementOwnerGroupValues		validateEmptyFunction(smUserId, "Entitlement");		public Document getEntitlementOwnerGroupValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getESPUserEntitlementValues		validateEmptyFunction(smUserId, "Entitlement");		public Document getESPUserEntitlementValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getAPRAUsersForSecurityClassificationRole		validateEmptyFunction(smUserId, "Entitlement");		public Document getAPRAUsersForSecurityClassificationRole(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/listMappedRolesforEntitlementGroupType		validateEmptyFunction(smUserId, "Entitlement");		public Document listMappedRolesforEntitlementGroupType(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getUserRoleEntitlementValueGroupMapping		validateEmptyFunction(smUserId, "Entitlement");		public Document getUserRoleEntitlementValueGroupMapping(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/addEntitlementValueGroup		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document addEntitlementValueGroup(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/addEntitlementOwnerGroupValues		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document addEntitlementOwnerGroupValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/updateEntitlementOwnerGroupValues		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document updateEntitlementOwnerGroupValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/removeEntitlementOwnerGroup		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document removeEntitlementOwnerGroup(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/addEntitlementValues		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document addEntitlementValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/addUserRoleEntitlementValueGroupMapping		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document addUserRoleEntitlementValueGroupMapping(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/removeEntitlementValueGroup		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document removeEntitlementValueGroup(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/updateEntitlementValueGroup		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document updateEntitlementValueGroup(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/removeEntitlementValues		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document removeEntitlementValues(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/removeUserRoleEntitlementValueGroupMapping		disabledFunction(smUserId, "OLDENTITLEMENT");		public Document removeUserRoleEntitlementValueGroupMapping(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection conn) throws Exception {
	/getEntitledEntities		validateEmptyFunction(userid, "Entitlement");		public Document getEntitledEntities(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEntitlementDrivers		validateEmptyFunction(userid, "Entitlement");		public Document getEntitlementDrivers(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEntitlementDriverData		validateEmptyFunction(userid, "Entitlement");		public Document getEntitlementDriverData(@EISInject(type = EISInject.Type.ExtraPath) String entitlementDriverName, @EISInject Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/clearEntitlementCache		validateEmptyFunction(userid, "Entitlement");		public Document clearEntitlementCache(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getAllOwnerGroups		validateEmptyFunction(userid, "Entitlement");		public Document getAllOwnerGroups(@EISInject Connection conn, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEntitesByEntityGroups		validateEmptyFunction(userid, "Entitlement");		public Document getEntitesByEntityGroups(@EISInject Connection conn, Document input, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getMSSUserDetail		no entitlement		public Document getMSSUserDetail(@EISInject(type = Type.Header, value = "sm_user") String userId) {
	/getClientRoles		no entitlement		public Document getClientRoles(@EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) {
/ermFeedController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ERMController.java
	/submitJob		validateMetamodelFunctionViaModel(smUserId, "Metamodel.ManageDataFeed", feed.getOwnerRole());		public void submitJob(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("source") String source, @EISInject("feedName") String feedName ) throws Exception {
	/loadDbFeed		validateMetamodelFunctionViaModel(smUserId, "Metamodel.ManageDataFeed", feed.getOwnerRole());		public Document loadDbFeed(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("feedName") String feedName/*, Document inputDoc*/) throws Exception {
/ocf/ocfCheckLoad		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ESPOCFCheckLoaderController.java
	/loadOCFChecksStats		disabledFunction(userid, "ocfCheckLoad");		public void loadOCFChecksStats(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/loadOCFChecks		disabledFunction(userid, "ocfCheckLoad");		public void loadOCFChecks(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
/espStat		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ESPStatsControlller.java
	/reloadJobByJobId		no entitlement		public void reloadJobByJobId( @EISInject("jobId") String jobId) throws Exception {
	/generateReport		validateEmptyFunction(userid, "espStat");		public void generateReport( @EISInject("query") String query, @EISInject("tableName") String tableName, @EISInject("criteria") HashMap<String, Object> criteria, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
/event/checkListVisualizer		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EventChecKlist.java
	/getCheckLists		disabledFunction(userid, "ECF");		public Map<String, Object> getCheckLists(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/checklistDetail		disabledFunction(userid, "ECF");		public Map<String, String> checklistDetail(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/controlsData		no entitlement		public Map<String, Object> controlsData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws SQLException {
/event/checkList		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EventChecklistController.java
	/getCheckLists		disabledFunction(userid, "ECF");		public Map<String, Object> getCheckLists(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getCheckListDetail		disabledFunction(userid, "ECF");		public Map<String, Object> getCheckListDetail(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/checklistDetail		no entitlement		public Map<String, Object> checklistDetail(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid,JSONObject inputJSON){
	/checklistDetail		no entitlement		public Map<String, Object> checklistDetail(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid,JSONObject inputJSON){
	/controlsData		no entitlement		public Map<String, Object> controlsData(@EISInject Connection connection, JSONObject inputJSON,@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/controlsData		no entitlement		public Map<String, Object> controlsData(@EISInject Connection connection, JSONObject inputJSON,@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/ECFOCFDependency		no entitlement		public Map<String, Object> ECFOCFDependency(@EISInject Connection connection, JSONObject inputJSON,@EISInject(type = Type.Header, value = "sm_user") String userid,@EISInject(type = EISInject.Type.ExtraPath) String ecfId) throws Exception {
	/getUpdatedStatus		no entitlement		public Map<String, Object> getUpdatedStatus(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getUpdatedStatus		no entitlement		public Map<String, Object> getUpdatedStatus(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/events		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EventController.java
	/addEventType		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Document addEventType(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/addComments		validateEmptyFunction(userid, "event");		public Document addComments(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventType		validateEmptyFunction(userid, "event");		public Document getEventType(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listEventTypes		validateEmptyFunction(userid, "event");		public Document listEventTypes(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/addEvent		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Document addEvent(@EISInject Connection connection, Document inputDocument, Document additionalAtributes, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/addEvent		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Document addEvent(@EISInject Connection connection, Document inputDocument, Document additionalAtributes, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/sendAllegroStatProExtracts		disabledFunction(userid, "event");		public Document sendAllegroStatProExtracts(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/runSSIAFeeds		disabledFunction(userid, "event");		public Document runSSIAFeeds(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/reloadSubscription		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Document reloadSubscription(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/saveEventSubscriptions		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Document saveEventSubscriptions(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/replayEventSubscription		validateAdminFunction(smUserId, "Dashboard.Events");		public Document replayEventSubscription(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("generatedId") String generatdId) throws Exception {
	/getEventSubscriptions		validateEmptyFunction(userid, "event");		public Document getEventSubscriptions(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/addSubscription		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public void addSubscription(@EISInject("sName") String sName, @EISInject("type") String type, @EISInject("rule") String rule, @EISInject("filter") String filter, @EISInject("action") String action, @EISInject("user") String user, @EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/removeSubscription		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public void removeSubscription(@EISInject("sId") String sId, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventsTree		validateEmptyFunction(userid, "event");		public Document getEventsTree(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventByID		validateAdminFunction(userid, "Dashboard.Events");		public Document getEventByID(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventsByID		validateAdminFunction(userid, "Dashboard.Events");		public Document getEventsByID(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventsByIDForJson		validateAdminFunction(userid, "Dashboard.Events");		public Document getEventsByIDForJson(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventErrorDetails		validateEmptyFunction(userid, "event");		public Document getEventErrorDetails(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listEvents		validateAdminFunction(userid, "Dashboard.Events");		public Document listEvents(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listEventSubscription		validateEmptyFunction(userid, "event");		public Document listEventSubscription(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "changeSet") String changeSet, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventSubscriptionsDetail		validateEmptyFunction(userid, "event");		public Document getEventSubscriptionsDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listSodEod		validateEmptyFunction(userid, "event");		public Document listSodEod(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listPortfolio		validateEmptyFunction(userid, "event");		public Document listPortfolio(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listSSIAAccounts		validateEmptyFunction(userid, "event");		public Document listSSIAAccounts(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listSMFAccounts		validateEmptyFunction(userid, "event");		public Document listSMFAccounts(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listDICTAccounts		validateEmptyFunction(userid, "event");		public Document listDICTAccounts(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getMessageTypes		validateEmptyFunction(userid, "event");		public Document getMessageTypes(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/throughputResults		validateEmptyFunction(userid, "event");		public Document throughputResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/regionBasedStats		validateEmptyFunction(userid, "event");		public Document regionBasedStats(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/statusMonitorResults		validateEmptyFunction(userid, "event");		public Document statusMonitorResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/feedNameExceptionResults		validateEmptyFunction(userid, "event");		public Document feedNameExceptionResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/datamartRefreshExceptionResults		validateEmptyFunction(userid, "event");		public Document datamartRefreshExceptionResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/feedRequestExceptionResults		validateEmptyFunction(userid, "event");		public Document feedRequestExceptionResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/ssiaMonitorResults		validateEmptyFunction(userid, "event");		public Document ssiaMonitorResults(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listEventDefinitions		validateEmptyFunction(userid, "event");		public Document listEventDefinitions(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventDefinitionByName		validateEmptyFunction(userid, "event");		public Document getEventDefinitionByName(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getEventDefinitionDetail		validateEmptyFunction(userid, "event");		public Document getEventDefinitionDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/sendEODEventNew		disabledFunction(userid, "event");		public Document sendEODEventNew(@EISInject("asOf") String asOf, @EISInject("martName") String martName, @EISInject("notifyFlag") String notifyFlag, @EISInject Connection dbConn, @EISInject("eventName") String eventName, @EISInject("startAsAtStr") String startAsAtStr, @EISInject("endAsAtStr") String endAsAtStr, @EISInject("timeZone") String timeZone, @EISInject("stMonitorEventName") String stMonitorEventName, @EISInject("asAt") String asAt, @EISInject("jobFlag") String jobFlag, @EISInject("manualPushFlag") String manualPushFlag, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/sendEODEvent		disabledFunction(userid, "event");		public Document sendEODEvent(@EISInject("eventName") String eventName, @EISInject("asOf") String asOf, @EISInject("asAt") String asAt, @EISInject("martName") String martName, @EISInject("schemaName") String schemaName, @EISInject("jobFlag") String jobFlag, @EISInject("endasOf") String endasOf, @EISInject("endasAt") String endasAt, @EISInject("combined") String combined, @EISInject("portfolioList") String portfolioList, @EISInject("martType") String martType, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/sendMandateEvent		disabledFunction(userid, "event");		public void sendMandateEvent(@EISInject("eventName") String eventName, @EISInject("asOf") String asOf, @EISInject("asAt") String asAt, @EISInject("martName") String martName, @EISInject("schemaName") String schemaName, @EISInject("jobFlag") String jobFlag, @EISInject("endasOf") String endasOf, @EISInject("endasAt") String endasAt, @EISInject("combined") String combined, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/reprocessSSIAData		disabledFunction(userid, "event");		public Document reprocessSSIAData(@EISInject("batchId") String batchId, @EISInject("martName") String martName, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/sendSODEODJobProcess		disabledFunction(userid, "event");		public void sendSODEODJobProcess(@EISInject("eventName") String eventName, @EISInject("asOf") String asOf, @EISInject("asAt") String asAt, @EISInject("martName") String martName, @EISInject("schemaName") String schemaName, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/downloadFile		eau.validateMetamodelFunction(smUser, "Metamodel.Query", feed.getName(), ENTITY_TYPE.DATAFEED);		public void downloadFile(@EISInject Connection connection, @EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
	/getFileFromSFTP		validateEmptyFunction(userid, "event");		public void getFileFromSFTP(@EISInject("fileName") String fileName, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/replayFailedEvents		disabledFunction(userid, "event");		public Document replayFailedEvents(@EISInject("messageId") String messageId, @EISInject("eventName") String eventName, @EISInject("startasAt") String startasAt, @EISInject("endasAt") String endasAt, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/listGMAAAccounts		validateEmptyFunction(userid, "event");		public Document listGMAAAccounts(@EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getGMAAAccounts		validateEmptyFunction(userid, "event");		public Document getGMAAAccounts(Document input, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/displayTextFromFile		validateEmptyFunction(userid, "event");		public Document displayTextFromFile(Document input, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/submitTextFeed		validateMetamodelFunctionViaModel(smUserId, "Metamodel.UploadCategoryData", feedObject.getOwnerRole());		public Document submitTextFeed(@EISInject Connection connection, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/getSubscriptionByEventType		validateEmptyFunction(userid, "event");		public Map<String, Object> getSubscriptionByEventType(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/event/stateMonitor		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EventStateMonitorController.java
	/getStateMonitor		eau.validateAdminFunction(userid, "Metamodel.View");		public Map<String, Object> getStateMonitor(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getStateMonitorDependenciesData		no entitlement		public Map<String, Object> getStateMonitorDependenciesData(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws SQLException {
	/getDependency		eau.validateAdminFunction(userid, "Metamodel.View");		public Map<String, Object> getDependency(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws SQLException {
/eventtype		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/EventTypeController.java
	/removeEventTypes		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Map<String, Object> removeEventTypes(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getEventTypes		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Map<String, Object> getEventTypes(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/saveEventType		validateAdminFunction(userid, "Metamodel.ManageEventSubscription");		public Map<String, Object> saveEventType(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/extractDeliveryOnDate		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ExtractDeliveryOnDate.java
	/deliver		no entitlement		public void deliver(@EISInject HttpServletRequest request,@EISInject Session session, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws ServletException, IOException, SQLException, Exception {
/extractHttpFeeds		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ExtractHttpFeeds.java
	/getHTTPFeed		disabledFunction(smUserId, "event");		public void getHTTPFeed(@EISInject Connection connection, @EISInject Session session, @EISInject("channelName") String channelName, @EISInject("reRun") String reRun, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/extracts		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ExtractsController.java
	/getFeedDetails		validateAdminFunction(userid, "Dashboard.Extracts");		public Document getFeedDetails(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getExtractData		validateAdminFunction(userid, "Dashboard.Extracts");		public Document getExtractData(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getExtractAuditTrailData		validateAdminFunction(userid, "Dashboard.Extracts");		public Document getExtractAuditTrailData(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getExtractJobData		validateAdminFunction(userid, "Dashboard.Extracts");		public Document getExtractJobData(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
/extractSftpFeeds		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ExtractSftpFeeds.java
	/getFeeds		disabledFunction(smUserId, "event");		public void getFeeds(@EISInject Connection connection, @EISInject Session session, @EISInject("clientCode") String clientCode, @EISInject("scheduleId") String scheduleId, @EISInject("reRun") String reRun, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getSFTPFeed		disabledFunction(smUserId, "event");		public void getSFTPFeed(@EISInject Connection connection, @EISInject Session session, @EISInject("channelName") String channelName, @EISInject("reRun") String reRun, @EISInject("asOf") String asOf, @EISInject("isNewRunType") String isNewRunType, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Long splitOn, Boolean cotainsHeader) throws Exception {
	/getExternalSFTPFeed		disabledFunction(smUserId, "event");		public void getExternalSFTPFeed( @EISInject Connection connection, @EISInject Session session, @EISInject("channelName") String channelName, @EISInject("reRun") String reRun, @EISInject("asOf") String asOf, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/splitFeedFile		no entitlement		public void splitFeedFile(@EISInject("channelName") String channelName, @EISInject("fileName") String fileName, @EISInject("splitCount") String splitCnt, @EISInject("containsHeader") String containsHeader) throws Exception {
	/splitFeedFileAndLoad		no entitlement		public void splitFeedFileAndLoad(@EISInject Connection connection, @EISInject Session session , @EISInject("channelName") String channelName , @EISInject("reRun") String reRun , @EISInject("asOf") String asOf , @EISInject("isNewRunType") String isNewRunType , @EISInject("splitLineNumber") String splitLineNumber , @EISInject("containsHeader") String containsHeader , @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/fdr		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/FDRController.java
	/getFundList		validateEmptyFunction(smUserId, "FDRController.getFundList");		public Document getFundList(@EISInject Connection connection, @EISInject Session session, @EISInject("FeedName") String feedName, @EISInject("AsOf") String asOf, @EISInject("Source") String source ,@EISInject("AsAt") String asAt, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/feed		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/FeedController.java
	/list		no entitlement		public Document list(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/detail		validateMetamodelFunctionViaModel(smUserId,     "Metamodel.View", feed.getOwnerRole());		public Document detail(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.ExtraPath) String feedName) throws Exception {
	/remoteDetail		validateMetamodelFunctionViaModel(smUserId,     "Metamodel.View", feed.getOwnerRole());		public Document remoteDetail(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/parseFeedHeader		validateEmptyFunction(smUserId, "FeedController.parseFeedHeader");		public Document parseFeedHeader(@EISInject("feedFile") FileItem feedFile, @EISInject("noOfLevels") String levels, @EISInject("templateName") String templateName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/parseFeedHeaderForSource		validateEmptyFunction(smUserId, "FeedController.parseFeedHeaderForSource");		public Document parseFeedHeaderForSource(@EISInject("dbPacakgeName") String dbPacakgeName, @EISInject("dbObjectName") String dbObjectName, @EISInject("source") String source, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getDBChannelForSource		disabledFunction(smUserId, "FeedController.getDBChannelForSource");		public Document getDBChannelForSource(@EISInject("source") String source, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getSchemaList		disabledFunction(smUserId, "FeedController.getFundList");		public Document getSchemaList(@EISInject("source") String source, @EISInject("query") String query, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getTableList		disabledFunction(smUserId, "FeedController.getTableList");		public Document getTableList(@EISInject("source") String source, @EISInject("schema") String schemaName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getColumnList		disabledFunction(smUserId, "FeedController.getColumnList");		public Document getColumnList(@EISInject("source") String source, @EISInject("schemaTable") String schemaTable, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getProcColumnList		disabledFunction(smUserId, "FeedController.getProcColumnList");		public Document getProcColumnList(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getColumnMetadata		validateEmptyFunction(smUserId, "FeedController.getColumnMetadata");		public Document getColumnMetadata(@EISInject("source") String source, @EISInject("schemaTable") String schemaTable, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getStoredProcMetadata		disabledFunction(smUserId, "FeedController.getStoredProcMetadata");		public Document getStoredProcMetadata(@EISInject("source") String source, @EISInject("schemaTable") String schemaTable, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportToExcel		no entitlement		public void exportToExcel(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @QueryParam("feedName") @EISInject("feedName") String feedName, @EISInject HttpServletRequest req, @EISInject HttpServletResponse res,@EISInject Connection dbCon,@QueryParam("changeSetName") @EISInject("changeSetName") String changeSetName) throws Exception {
	/downloadFeedMappingTemplate		validateEmptyFunction(smUserId, "FeedController.downloadFeedMappingTemplate");		public void downloadFeedMappingTemplate(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/static		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/FeedFileDemilerController.java
	/listFileDelimiters		validateEmptyFunction(smUserId, "SystemProperty.view");		public Document listFileDelimiters(Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/genericDataService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/GeneralDataService.java
	/MetaDataService		validateMetamodelFunctionViaModel(smUserId,     "Metamodel.View", cat.getOwnerRole());		public Document MetaDataService(Document inputDocument,@EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/GenericDataService		validateMetamodelFunctionViaModel(smUserId,     "Metamodel.View", cat.getOwnerRole());		public Document GenericDataService(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.Parameter, value = "foo") String sessionId) throws Exception {
	/LookupService		validateMetamodelFunctionViaModel(smUserId, "Metamodel.View", mart.getOwnerRole());		public Document LookupService(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getCheckReportCategoryData		no entitlement		public Document getCheckReportCategoryData(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodelUpload		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/GenerateMetamodelController.java
	/saveMetaModelActions		disabledFunction(userId, "GenerateMetamodelController.saveMetaModelActions");		public Document saveMetaModelActions(@EISInject("metamodelXLS") FileItem metamodelXLSFile, @EISInject("xlsDescriptorProperties") FileItem processPropsFile, @EISInject(type = Type.Header, value = "sm_user") String userId, @EISInject Connection conn) throws Exception {
/genericPluginController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/GenericPluginController.java
	/refreshPlugin		validateEmptyFunction(smUserId, "GenericPluginController.refreshPlugin");		public void refreshPlugin(@EISInject("plugin") String pluginName, @EISInject("methodName") String methodName , @EISInject("martName") String martName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/refreshPlugin		validateEmptyFunction(smUserId, "GenericPluginController.refreshPlugin");		public void refreshPlugin(@EISInject("plugin") String pluginName, @EISInject("methodName") String methodName , @EISInject("martName") String martName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/replayBasedOnAsOf		validateEmptyFunction(smUserId, "GenericPluginController.replayBasedOnAsOf");		public void replayBasedOnAsOf(@EISInject("plugin") String pluginName, @EISInject("martName") String martName, @EISInject("startAsOf") String startAsOf, @EISInject("endAsOf") String endAsOf, @EISInject("portfolioList") String portfolioList, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/gmaaController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/GMAAController.java
	/callGMAA		validateEmptyFunction(smUserId, "GMAAController.replayBasedOnAsOf");		public void callGMAA(@EISInject("martName") String martName,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/replayBasedOnAsOf		validateEmptyFunction(smUserId, "GMAAController.replayBasedOnAsOf");		public void replayBasedOnAsOf(@EISInject("martName") String martName, @EISInject("startAsOf") String startAsOf, @EISInject("endAsOf") String endAsOf, @EISInject("portfolioList") String portfolioList, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/replayBasedOnUI		validateEmptyFunction(smUserId, "GMAAController.replayBasedOnUI");		public Document replayBasedOnUI(Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/mandateIdList		validateEmptyFunction(smUserId, "GMAAController.mandateIdList");		public Document mandateIdList(Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/martNameList		validateEmptyFunction(smUserId, "GMAAController.martNameList");		public Document martNameList(Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/renew		validateEmptyFunction(smUserId, "GMAAController.martNameList");		public void renew(@EISInject("martName") String martName,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/homepage		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/HomepageController.java
	/entitySummary		validateEmptyFunction(smUserId, "HomepageController.entitySummary");		public Document entitySummary(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/dmcatindex		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/IndexController.java
	/onDropSaveValidateEnt		eau.validateMetamodelFunction(smUserId, "Metamodel.ManageDBIndex", name, ENTITY_TYPE.DATAMART);		public Map<String, Object> onDropSaveValidateEnt(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, JSONObject inputJSON) throws Exception {
	/getEntitlementValesJSON		no entitlement		public Map<String, Object> getEntitlementValesJSON(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, JSONObject inputJSON) throws Exception {
	/getEntitlementOwnerGroupVals		no entitlement		public Map<String, Object> getEntitlementOwnerGroupVals(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, JSONObject inputJSON) throws Exception {
	/retrieveIndexInfo		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Map<String, Object> retrieveIndexInfo(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, JSONObject inputJSON) throws Exception {
	/getDMpCatList		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Map<String, Object> getDMpCatList(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/instanceSync		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/InstanceSyncController.java
	/getModelsByEvn		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> getModelsByEvn(@EISInject(type = Type.Header, value = "sm_user") String smUserId, JSONObject inputJSON) throws Exception {
	/metamodelSyncUp		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> metamodelSyncUp(@EISInject(type = Type.Header, value = "sm_user") String smUserId, JSONObject inputJSON) throws Exception {
	/createChangeSet		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> createChangeSet(@EISInject(type = Type.Header, value = "sm_user") String smUserId, JSONObject inputJSON) throws Exception {
	/downloadMetamodelDif		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> downloadMetamodelDif(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject HttpServletResponse resp, @EISInject("targetEnv") String targetEnv, @EISInject("sourceEnv") String sourceEnv, @EISInject("targetModel") String targetModel, @EISInject("sourceModel") String sourceModel) throws Exception {
	/physicalSyncUp		eau.validateEmptyFunction(smUserId, null);		public Map<String, Object> physicalSyncUp(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject HttpServletResponse resp, @EISInject("targetEnv") String targetEnv, @EISInject("sourceEnv") String sourceEnv, @EISInject("targetModel") String targetModel, @EISInject("sourceModel") String sourceModel) throws Exception {
/interchange		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/InterchangeController.java
	/login		eau.disabledFunction(smUserId, "Admin.InterchangeLogin");		public String login(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/jdbc		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/JDBCController.java
	/getOOM		eau.disabledFunction(smUserId, "Admin.getOOM");		public void getOOM(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getAttributes		no entitlement		public Document getAttributes() throws Exception {
	/getBestRowIdentifier		no entitlement		public Document getBestRowIdentifier() throws Exception {
	/getCatalogs		no entitlement		public Document getCatalogs() throws Exception {
	/getClientInfoProperties		no entitlement		public Document getClientInfoProperties() throws Exception {
	/getColumnPrivileges		no entitlement		public Document getColumnPrivileges() throws Exception {
	/listExecutorCache		no entitlement		public Document listExecutorCache() throws Exception {
	/saveExecutorCache		eau.disabledFunction(smUserId, "Admin.saveExecutorCache");		public void saveExecutorCache(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("cacheFile") String cacheFile) throws Exception {
	/loadExecutorCache		eau.disabledFunction(smUserId, "Admin.saveExecutorCache");		public void loadExecutorCache(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("cacheFile") String cacheFile) throws Exception {
	/initChainedTable		eau.validateAdminFunction(smUserId, "Admin.DataChaining");		public void initChainedTable(@EISInject("marts") String marts, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/initGroupChainedTable		eau.validateAdminFunction(smUserId, "Admin.DataChaining");		public void initGroupChainedTable(@EISInject("groupId") String groupID, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/initKhash		eau.validateAdminFunction(smUserId, "Admin.DataChaining");		public void initKhash(@EISInject("mart") String marts, @EISInject("asAtFrom") String asAtFrom, @EISInject("asAtTo") String asAtTo, @EISInject("overrideKhash") String overrideKhash, @EISInject("where") String whereCondition, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/initKhashBatch		eau.validateAdminFunction(smUserId, "Admin.DataChaining");		public void initKhashBatch(@EISInject("mart") String marts, @EISInject("asOfFrom") String asOfFrom, @EISInject("asOfTo") String asOfTo, @EISInject("overrideKhash") String overrideKhash, @EISInject("threadCount") String nmbrOfThreads, @EISInject("where") String whereCondition, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getColumns		no entitlement		public Document getColumns(@EISInject("tableNamePattern") String tableName, @EISInject("columnNamePattern") String columnNamePattern, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getCrossReference		no entitlement		public Document getCrossReference() throws Exception {
	/getExportedKeys		no entitlement		public Document getExportedKeys() throws Exception {
	/getFunctionColumns		no entitlement		public Document getFunctionColumns() throws Exception {
	/getFunctions		no entitlement		public Document getFunctions() throws Exception {
	/getImportedKeys		no entitlement		public Document getImportedKeys() throws Exception {
	/getIndexInfo		no entitlement		public Document getIndexInfo() throws Exception {
	/getPrimaryKeys		no entitlement		public Document getPrimaryKeys(@EISInject("tableName") String tableName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getProcedureColumns		no entitlement		public Document getProcedureColumns() throws Exception {
	/getProcedures		no entitlement		public Document getProcedures() throws Exception {
	/getSchemas		no entitlement		public Document getSchemas(@EISInject("schemaPattern") String schemaPattern, @EISInject("catalog") String catalog) throws Exception {
	/getSuperTables		no entitlement		public Document getSuperTables() throws Exception {
	/getSuperTypes		no entitlement		public Document getSuperTypes() throws Exception {
	/getTablePrivileges		no entitlement		public Document getTablePrivileges(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getTables		no entitlement		public Document getTables(@EISInject("tableNamePattern") String tableNamePattern, @EISInject("tableTypes") String[] tableTypes, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getTableTypes		no entitlement		public Document getTableTypes() throws Exception {
	/getTypeInfo		no entitlement		public Document getTypeInfo() throws Exception {
	/getUDTs		no entitlement		public Document getUDTs() throws Exception {
	/getVersionColumns		no entitlement		public Document getVersionColumns() throws Exception {
	/getDataType		no entitlement		public Document getDataType(Document doc) throws Exception {
	/runSQL		no entitlement		public Document runSQL(@EISInject SQLRunner runner,@EISInject Connection connection, @EISInject("sql") String sql, @EISInject(type = Type.Header, value = "req_timezone") String espTimeZone, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/runSQLBinary		no entitlement		public void runSQLBinary(@EISInject("sql") String sql, @EISInject(type = Type.Header, value = "req_timezone") String reqTimeZone, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUser, @EISInject(type = Type.Header, value = "jdbc_version") String jdbcVersion, @EISInject(type = Type.Header, value = "jdbc_protocol_version") String protocolVersion, @EISInject (type = Type.ExtraPath) String sessionId, @EISInject("info") String info, @EISInject ("guid") String guid,@EISInject ("seq") String seq, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @EISInject(type = Type.Header, value = "esp_jdbc_attr") String jdbcExtraInfo) throws Exception {
	/runSQLBinaryRetXMLJSON		no entitlement		public Object runSQLBinaryRetXMLJSON( @EISInject("sql") String sql, @EISInject(type = Type.Header, value = "req_timezone") String reqTimeZone, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUser, @EISInject(type = Type.Header, value = "jdbc_version") String jdbcVersion, @EISInject(type = Type.Header, value = "jdbc_protocol_version") String protocolVersion, @EISInject(type = Type.ExtraPath) String sessionId, @EISInject("info") String info, @EISInject("guid") String guid, @EISInject("seq") String seq, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @EISInject(type = Type.Header, value = "esp_jdbc_attr") String jdbcExtraInfo, @EISInject("ret_type") String retType, @EISInject(type = Type.Header, value = "bln_meta_data") String bMetaData) throws Exception {
/jobstats		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/JobPerformanceLoggingController.java
	/getEntityList		eau.validateAdminFunction(userid, "Dashboard.DEVOperationMenu");		public Map<String, Object> getEntityList(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getJobBaiscInfo		no entitlement		public Map<String, Object> getJobBaiscInfo(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
/jobReplay		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/JobReplay.java
	/reloadJobByJobId		eau.disabledFunction(smUserId, "Dashboard.JobReplay");		public void reloadJobByJobId(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("jobId") String jobId) throws Exception {
	/reloadJobByFromDate		eau.disabledFunction(smUserId, "Dashboard.JobReplay");		public void reloadJobByFromDate(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("fromDate") String fromDate) throws Exception {
/loadHolidayCalendar		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/LoadCalendarController.java
	/invokeHolidayLoad		eau.validateEmptyFunction(smUserId, null);		public void invokeHolidayLoad(@EISInject("feedName") String feedName, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/loaders		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/Loaders.java
	/showFeedLoader		no entitlement		public Map showFeedLoader() throws Exception {
	/feedForm		no entitlement		public Map feedForm() throws Exception {
	/loadFeed		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Map loadFeed(@EISInject Connection connection, @EISInject Session session, @EISInject("feedName") String feedName, @EISInject("feedFile") FileItem feedFile, @EISInject("asAt") String strAsAt, @EISInject("asOf") String strAsOf, @EISInject("feedSource") String feedSource, @EISInject("charset") String strCharset, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/loadFeedMulti		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Map loadFeedMulti(@EISInject Connection connection, @EISInject Session session, @EISInject("feedName") String feedName, @EISInject("feedFile") List<FileItem> feedFile, @EISInject("asAt") String strAsAt, @EISInject("asOf") String strAsOf, @EISInject("feedSource") String feedSource, @EISInject("charset") String strCharset, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/replayFeed		no entitlement		public Document replayFeed(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/uploadFeedFileAndReplayViaChannel		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Document uploadFeedFileAndReplayViaChannel(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response,@EISInject(type = Type.Header, value = "sm_user") String smUserId, String strCharset, @EISInject("RequestId") String reqId,@EISInject("fileName") String fileName) throws Exception {
	/uploadFeedFileAndReplay		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Document uploadFeedFileAndReplay(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response,@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("feedFile") FileItem feedFile, @EISInject("charset") String strCharset, @EISInject("RequestId") String reqId) throws Exception {
	/replayMultipleFeed		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Document replayMultipleFeed(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response,@EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/loadHTTPFeed		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public void loadHTTPFeed(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getTableData		eau.validateAdminFunction(userid, "Metamodel.View");		public Document getTableData(@EISInject Connection dbCon, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/exportCategoryDataEditorExcel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public void exportCategoryDataEditorExcel(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportCategoryDataEditorCSV		eau.validateAdminFunction(smUserId, "Metamodel.View");		public void exportCategoryDataEditorCSV(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getSecurityClassificationData		eau.validateAdminFunction(smUserId, "Dashboard.SecurityClassification");		public Document getSecurityClassificationData(@EISInject Connection dbCon, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/saveTableData		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Document saveTableData(@EISInject Connection dbCon, Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser) throws Exception {
	/saveTableDataWithFeed		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Document saveTableDataWithFeed(@EISInject Connection dbCon, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser) throws Exception {
	/manualLoadDbFeed		eau.validateMetamodelFunction(smUserId, "Metamodel.UploadCategoryData",feedName,ENTITY_TYPE.DATAFEED);		public void manualLoadDbFeed(@EISInject(type = Type.Header, value = "sm_user") String smUserId,@EISInject("feedName") String feedName,@EISInject("source") String source, @EISInject("isManual") String isManual, @EISInject("filterExpression") String filterExpression) throws Exception {
	/loadDbFeed		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Document loadDbFeed(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDoc) throws Exception {
	/getFundGroupNames		eau.validateMetamodelFunction(smUserId, "Metamodel.View","ACCOUNT_GROUP_MEMBERSHIP",ENTITY_TYPE.CATEGORY);		public Document getFundGroupNames(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDoc) throws Exception {
	/getFundList		eau.validateMetamodelFunction(smUserId, "Metamodel.View","ACCOUNT_GROUP_MEMBERSHIP",ENTITY_TYPE.CATEGORY);		public Document getFundList(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDoc) throws Exception {
	/approveAndLoadFeed		no entitlement		public Document approveAndLoadFeed(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId,@EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, Document inputDocument) throws Exception {
	/rejectFeed		no entitlement		public Document rejectFeed(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId,@EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, Document inputDocument) throws Exception {
	/approveAndLoadFeedRealtime		eau.validateAdminFunction(smUserId, "Dashboard.ManualDataUpload");		public Document approveAndLoadFeedRealtime(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId,@EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, Document inputDocument) throws Exception {
/metamodel/logicaltable		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/LogicalTableController.java
	/detail		no entitlement		public Document detail(@EISInject(type = EISInject.Type.ExtraPath) String ltName) throws Exception {
/managemodel		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ManageModelController.java
	/getAllModels		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getAllModels(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getModelAppInfo		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getModelAppInfo(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getModelMyssInfo		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getModelMyssInfo(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getEncryptedElementsByModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getEncryptedElementsByModel(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getEntitlementDriversByModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getEntitlementDriversByModel(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getSharedObjectsByModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getSharedObjectsByModel(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getReferObjectsByModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getReferObjectsByModel(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/saveSharedObjectChanges		eau.validateAdminFunction(smUserId, "Metamodel.ManageModel");		public Document saveSharedObjectChanges(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/saveModelChanges		eau.validateAdminFunction(userId, "Metamodel.ManageModel");		public Document saveModelChanges(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
	/saveEntitlementDrivers		eau.validateAdminFunction(userId, "Metamodel.ManageModel");		public Document saveEntitlementDrivers(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
	/getModelProfile		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getModelProfile(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/saveModelProfile		eau.validateAdminFunction(userId, "Metamodel.ManageModel");		public Document saveModelProfile(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
/operation/martRefresh		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ManualMartRefreshController.java
	/list		no entitlement		public Document list(@EISInject Connection connection, Document inputDocument) throws Exception {
	/saveManualRefreshJob		eau.validateAdminFunction(smUserId, "Dashboard.ManualMartRefresh");		public Document saveManualRefreshJob(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/executeManualRefreshJob		eau.validateAdminFunction(smUserId, "Dashboard.ManualMartRefresh");		public Document executeManualRefreshJob(@EISInject Connection connection, @EISInject Session session, Document inputDocument,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getManualRefreshMetaData		eau.validateAdminFunction(smUserId, "Dashboard.ManualMartRefresh");		public Document getManualRefreshMetaData(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/mePriceChallengeController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/MEPriceChallengeController.java
	/triggerPersistentMartRefresh		eau.validateAdminFunction(smUserId, "Dashboard.Metamodel.UploadCategoryData");		public Document triggerPersistentMartRefresh(@EISInject("asOf") String asOfStr,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/compare		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/MetaModelCompareController.java
	/compareMetaModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document compareMetaModel(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/sourceCompare		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document sourceCompare(String sourceEnv, String targetEnv, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/compareDetails		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document compareDetails(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception, SQLException {
/metamodel/dashboard		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/MetaModelDashboardController.java
	/searchEntitiesByName		no entitlement		public Document searchEntitiesByName(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getDictionaryViewList		no entitlement		public Document getDictionaryViewList( @EISInject Connection connection , @EISInject(type = Type.Header, value = "sm_user") String smUserId ) throws Exception {
	/getModelViewList		no entitlement		public Document getModelViewList( @EISInject Connection connection , @EISInject(type = Type.Header, value = "sm_user") String smUserId ) throws Exception {
	/getNavigationMenu		no entitlement		public Document getNavigationMenu(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getUserDetail		no entitlement		public Document getUserDetail(@EISInject(type = Type.Header, value = "sm_user") String userId){
/modelDeployment		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/ModelDeploymentController.java
	/getModelDeploymentStructure		no entitlement		public Document getModelDeploymentStructure( @EISInject Connection connection , @EISInject(type = Type.Header, value = "sm_user") String smUserId ) throws Exception {
/MSIMTurnoverReportController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/MSIMTurnoverReportController.java
	/generateTurnoverReportData		eau.disabledFunction(smUserId, "MSIMTurnoverReportController.generateTurnoverReportData");		public Document generateTurnoverReportData( @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("startAsOf") String strStartAsOf, @EISInject("endAsOf") String strEndAsOf, @EISInject("startAsAt") String strStartAsAt, @EISInject("endAsAt") String strEndAsAt, @EISInject("operatingMode") String operatingMode, @EISInject("portfolioCodeList") String portfolioCodeList, @EISInject("testMode") String testMode) throws Exception {
/ocf		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/OCFDashboardController.java
	/exportOCFConfigExcel		no entitlement		public void exportOCFConfigExcel(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
	/exportOCFExcelJSON		no entitlement		public void exportOCFExcelJSON(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
	/exportOCFExcel		no entitlement		public void exportOCFExcel(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
	/getOCFCheckGroupList		no entitlement		public Document getOCFCheckGroupList(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/saveOCFCheckGroup		eau.validateAdminFunction(userid, "Dashboard.OCFConfigure");		public Document saveOCFCheckGroup(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject Connection connection, Document inputDocument) throws Exception {
	/getOCFEnvironmentIdentifiers		no entitlement		public Document getOCFEnvironmentIdentifiers(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getOCFCheckRunList		no entitlement		public Document getOCFCheckRunList(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/addOCFExceptionComment		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document addOCFExceptionComment(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject Connection connection, Document inputDocument) throws Exception {
	/getOCFRunDetailByASAT		no entitlement		public Document getOCFRunDetailByASAT(Document inputDocument) throws Exception {
	/getOCFCheckRunDetail		no entitlement		public Document getOCFCheckRunDetail(@EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/reRunOCFCheck		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document reRunOCFCheck(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/reRunBatchOCFCheck		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document reRunBatchOCFCheck(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/prepareManualRerun		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document prepareManualRerun(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getOCFCheckComment		no entitlement		public Document getOCFCheckComment(Document inputDocument) throws Exception {
	/addOCFCheckComment		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document addOCFCheckComment(@EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/saveOCFCheckConfig		eau.validateAdminFunction(userid, "Dashboard.OCFConfigure");		public Document saveOCFCheckConfig(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getOCFCheckConfigDetail		no entitlement		public Document getOCFCheckConfigDetail( @EISInject(type = EISInject.Type.ExtraPath) String ocfChkId) throws Exception {
	/getCheckDetailWithVersion		no entitlement		public Document getCheckDetailWithVersion(Document input) throws Exception {
	/getOCFCheckConfigList		no entitlement		public Document getOCFCheckConfigList(Document inputDocument) throws Exception {
	/flipOCFCheckRunStatus		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document flipOCFCheckRunStatus(@EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/enableDisableOCFcheckConfig		eau.validateAdminFunction(userId, "Dashboard.OCFConfigure");		public Document enableDisableOCFcheckConfig(@EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
	/synchupCheckRunSchedule		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public void synchupCheckRunSchedule(@EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject("checkId") String checkId) throws Exception {
	/searchMetaModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document searchMetaModel(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("dbEnvName") String dbEnvName, Document inputDocument) throws Exception {
	/metaModelDetail		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document metaModelDetail(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("dbEnvName") String dbEnvName, @EISInject("type") String type, @EISInject("name") String name) throws Exception {
	/ocfCheckValidateStatus		no entitlement		public Document ocfCheckValidateStatus() throws Exception {
	/getProperties		no entitlement		public Document getProperties() throws Exception {
	/getOCFPDDate		no entitlement		public Document getOCFPDDate() throws Exception {
	/getOCFRunStatsChartSummary		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Document getOCFRunStatsChartSummary(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/editFinalCheck		eau.validateAdminFunction(userid, "Dashboard.OCFConfigure");		public Document editFinalCheck(Document checkDoc, @EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getTimeZoneForOCF		no entitlement		public Document getTimeZoneForOCF() throws Exception {
	/writeOCFResultstoCategory		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public void writeOCFResultstoCategory(@EISInject("asOfParameter") String asOfParameter, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/prepareManualRerunByJson		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Map<String, Object> prepareManualRerunByJson(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/reRunOCFCheckByJson		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Map<String, Object> reRunOCFCheckByJson(JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/reRunBatchOCFCheckByJson		eau.validateAdminFunction(userid, "Dashboard.OCFControls");		public Map<String, Object> reRunBatchOCFCheckByJson(JSONObject inputJSON, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/downloadOCFTemplate		validateEmptyFunction(smUser, "exportO");		public void downloadOCFTemplate(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp, @EISInject(type = Type.Header, value = "sm_user") String smUser) throws Exception {
	/uploadReportMapping		no entitlement		public Document uploadReportMapping( @EISInject("userId") String smUserId, @EISInject("fileName") String fileName, @EISInject("fileContent") FileItem ocfFile) throws Exception {
	/getReportCategoryMapping		eau.validateAdminFunction(userid, "Dashboard.OCFConfigure");		public Document getReportCategoryMapping(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, Document inputDocument) throws Exception {
	/getExceptionList		no entitlement		public Map<String, Object> getExceptionList(@EISInject(type = Type.Header, value = "sm_user") String userid) {
	/exportOCFReportMappingExcel		no entitlement		public void exportOCFReportMappingExcel(@EISInject HttpServletRequest req, @EISInject HttpServletResponse resp) throws Exception {
/exceptionMgmntOcf		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/OCFExceptionMgmtController.java
	/saveExceptionsCommentary		disabledFunction(userid, "ECF");		public Map<String, Object> saveExceptionsCommentary(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject requestJSON) throws Exception {
	/getExceptionsCommentary		no entitlement		public Map<String, Object> getExceptionsCommentary(@EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getOcfExceptionStatusValues		no entitlement		public Map<String, Object> getOcfExceptionStatusValues(String exceptionListName) throws Exception {
/outbound		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/OutboundController.java
	/listenMQAcknowledgement		eau.disabledFunction(smUserId, "OutboundController.Update");		public Document listenMQAcknowledgement(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject(type = Type.Header, value = "CorrelationId") String batchID, @EISInject(type = Type.Header, value = "uId") String uId, @EISInject Document doc) throws Exception {
	/batchReplayOutboundFeed		eau.validateAdminFunction(smUserId, "Dashboard.Extracts.Replay");		public Document batchReplayOutboundFeed(@EISInject Connection connection, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/replayOutboundFeed		eau.validateAdminFunction(smUserId, "Dashboard.Extracts.Replay");		public Document replayOutboundFeed(@EISInject Connection connection, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("requestId") String requestId, @EISInject("ClientDeliveryFlag") String clientDeliveryFlag, @EISInject("channel") String replayedChannel) throws Exception {
	/manualFileLoadReplay		eau.validateAdminFunction(smUserId, "Dashboard.Extracts.Replay");		public Document manualFileLoadReplay(@EISInject Connection connection, @EISInject("feedFile") FileItem feedFile, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("requestId") String requestId, @EISInject("ClientDeliveryFlag") String clientDeliveryFlag, @EISInject("channel") String replayedChannel) throws Exception {
	/sendExtractsFeedRequest		no entitlement		public Document sendExtractsFeedRequest(@EISInject Connection connection, @EISInject Session session, @EISInject("EventName") String eventName, @EISInject("AsOf") String asOf, @EISInject("AsAt") String asAt, @EISInject("FromAsAt") String fromAsAt, @EISInject("TimeZone") String timeZone, @EISInject("ClientDeliveryFlag") String clientDeliveryFlag, @EISInject HttpServletRequest request, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("PriorToPriorAsAt") String priorToPriorAsAt) throws Exception {
	/sendOutboudFeedRequest		no entitlement		public Document sendOutboudFeedRequest(@EISInject Connection connection, @EISInject Session session, @EISInject("FeedName") String feedName, @EISInject("AsOf") String asOf, @EISInject("AsAt") String asAt, @EISInject("FromAsAt") String fromAsAt, @EISInject("EventType") String eventType, @EISInject("ClientName") String clientName, @EISInject("TimeZone") String timeZone, @EISInject("EventName") String eventName, @EISInject("ClientDeliveryFlag") String clientDeliveryFlag, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("PriorToPriorAsAt") String priorToPriorAsAt) throws Exception {
	/getOutboundFeedMetadata		no entitlement		public Document getOutboundFeedMetadata(@EISInject Connection connection, Document inputDocument) throws Exception {
	/getOutboundFeedDetail		no entitlement		public Document getOutboundFeedDetail(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "changeSet") String changeSet, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/getOutboundDataQueryChannel		no entitlement		public Document getOutboundDataQueryChannel(@EISInject Connection connection, Document inputDocument) throws Exception {
	/updateAutoDelivery		eau.validateAdminFunction(smUserId, "Metamodel.ManageExtract");		public Document updateAutoDelivery(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/updateExtractStatus		eau.validateAdminFunction(smUserId, "Metamodel.ManageExtract");		public Document updateExtractStatus(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getOutboundChannelMetadata		no entitlement		public Document getOutboundChannelMetadata(@EISInject Connection connection, Document inputDocument) throws Exception {
	/listFromDB		no entitlement		public Document listFromDB(@EISInject Connection connection,@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/list		no entitlement		public Document list(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/overDraftIdleStats		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/OverDraftIdleStatsController.java
	/initDataLoad		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.UploadCategoryData", MetaModel.getModel().getTable("RECONCILIATION_CASH_SUMMARY_PLUGIN").getOwnerRole());		public Document initDataLoad(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("startAsOf") String strStartAsOf, @EISInject("endAsOf") String strEndAsOf, @EISInject("startAsAt") String strStartAsAt, @EISInject("endAsAt") String strEndAsAt, @EISInject("portfolioCodeManager") String portfolioCodeManager, @EISInject("testMode") String testMode, @EISInject("dailyMode") String dailyMode) throws Exception {
/metamodel/remotesource		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/RemoteMartController.java
	/getMetaModelSource		eau.validateEmptyFunction(smUserId, "Metamodel.View");		public Document getMetaModelSource(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getMarts		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getMarts(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception{
	/getMartDetails		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getMartDetails(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/metamodel/search		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SearchController.java
	/searchByName		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document searchByName(@EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/searchByNameWithModel		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document searchByNameWithModel(@EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/searchInheritEntities		no entitlement		public Document searchInheritEntities(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/searchEntitiesByName		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document searchEntitiesByName(@EISInject(type = Type.Header, value = "sm_user") String smUserId,Document inputDocument) throws Exception {
	/list		no entitlement		public Document list(Document inputDocument) throws Exception {
	/detail		no entitlement		public Document detail(@EISInject(type = EISInject.Type.ExtraPath) String datamartName) throws Exception {
/sharedObject		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SharedObjectController.java
	/list		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document list(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getEntitisWithOwnerGroup		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.View", ownerGroup);		public Document getEntitisWithOwnerGroup(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getAllOwnerGroups		eau.validateAdminFunction(smUserId, "Metamodel.View");		public Document getAllOwnerGroups(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getEntitlementDrivers		eau.validateEmptyFunction(smUserId, "EntitlementDriver.View");		public Document getEntitlementDrivers(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/saveModelMappings		eau.disabledFunction(smUserId, "SharedObjectController.Edit");		public Document saveModelMappings(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
/SLARefresh		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SLARefreshSubmit.java
	/submitRequestByEvent		eau.disabledFunction(smUserId, "Dashboard.JobReplay");		public void submitRequestByEvent(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("deliverable") String eventName) throws Exception {
	/submitRequestByMartAsat		eau.disabledFunction(smUserId, "Dashboard.JobReplay");		public void submitRequestByMartAsat(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("martName") String martName, @EISInject("asat") String asatStr) throws Exception {
/snapshot		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SnapshotController.java
	/createSnapshot		eau.validateMetamodelFunctionViaModel(smUserId,  "Metamodel.UploadCategoryData", MetaModel.getModel().getTable(tableName).getOwnerRole());		public void createSnapshot(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("tableName") String tableName, @EISInject("asOf") String asOf, @EISInject("rowType") String strRowType, @EISInject("version") String version, @EISInject("asAt") String asAt, @EISInject("optimize") String optimize) throws Exception {
	/removeSnapshot		eau.disabledFunction(smUserId, "Metamodel.ManageSnapshot");		public void removeSnapshot(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("snapShotId") String id,@EISInject("version") String version) throws Exception {
	/getLatestSnapshot		no entitlement		public void getLatestSnapshot(@EISInject("tableName") String tableName, @EISInject("asOf") String asOf, @EISInject("rowType") String strRowType, @EISInject("version") String version, @EISInject("asAt") String asAt) throws Exception {
/metamodel/source		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SourceController.java
	/list		no entitlement		public Document list(Document inputDocument) throws Exception {
	/detail		no entitlement		public Document detail(@EISInject(type = EISInject.Type.ExtraPath) String sourceName) throws Exception {
/spCaller		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SPCaller.java
	/callSP		eau.disabledFunction(smUserId, "Admin.CallSP");		public void callSP(@EISInject("spName") String spName, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/sqlAction		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SqlActionController.java
	/getViewCode		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.View", datamart.getOwnerRole());		public Document getViewCode(@EISInject Connection conn, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/refreshViewCode		eau.validateMetamodelFunctionViaModel(smUserId, "Metamodel.Hint.DBView", lt.getOwnerRole());		public Document refreshViewCode(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, Document input) throws Exception {
	/queryList		eau.validateEmptyFunction(smUserId, "Metamodel.ViewChangeSet");		public Document queryList(@EISInject Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("changeSet") String changeSet) throws Exception {
/stateMonitor		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/StateMonitorController.java
	/removeStateMonitor		eau.validateEmptyFunction(userid, "StateMonitorController.removeStateMonitor");		public Map<String, Object> removeStateMonitor(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getStateMonitor		eau.validateAdminFunction(userid, "Metamodel.View");		public Map<String, Object> getStateMonitor(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/saveStateMonitor		eau.validateEmptyFunction(userid, "StateMonitorController.saveStateMonitor");		public Map<String, Object> saveStateMonitor(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid, JSONObject inputJSON) throws Exception {
	/getMonitorSubjects		eau.validateAdminFunction(userid, "Metamodel.View");		public Map<String, Object> getMonitorSubjects(@EISInject Connection connection, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
/storageSize		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/StorageSizeInMultiTenant.java
	/createReport		eau.validateEmptyFunction(smUserId, "StorageSizeInMultiTenant.view");		public void createReport(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws ServletException, IOException, SQLException, Exception {
/file		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/StoreFileController.java
	/fileUpload		eau.validateAdminFunction(smUserId, "Dashboard.FileUpload");		public Map<String, Object> fileUpload(@EISInject Connection connection, @EISInject("feedFile") FileItem feedFile, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/downloadFile		eau.validateAdminFunction(smUserId, "Dashboard.downloadFile");		public void downloadFile(@EISInject Connection connection, @EISInject HttpServletRequest req, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject HttpServletResponse resp,boolean shrinkFilename) throws Exception {
	/downloadFile		eau.validateAdminFunction(smUserId, "Dashboard.downloadFile");		public void downloadFile(@EISInject Connection connection, @EISInject HttpServletRequest req, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject HttpServletResponse resp,boolean shrinkFilename) throws Exception {
/metamodel/supplemental		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/SupplementalController.java
	/list		no entitlement		public Document list(Document inputDocument) throws Exception {
	/getListByType		no entitlement		public Document getListByType(@EISInject Connection connection, Document inputDocument) throws Exception {
	/getListByTypes		no entitlement		public Document getListByTypes(@EISInject Connection connection, Document inputDocument) throws Exception {
	/getEntityHints		no entitlement		public Document getEntityHints(@EISInject Connection connection, Document inputDocument) throws Exception {
	/getSSCDataClassification		no entitlement		public Document getSSCDataClassification(@EISInject Connection connection, Document inputDocument) throws Exception {
	/getProperty		eau.validateEmptyFunction(smUserId, "SystemProperty.view");		public Document getProperty(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/token		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/TokenController.java
	/getUniqueKey		no entitlement		public Document getUniqueKey(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/turnoverReportController		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/TurnoverReportController.java
	/generateTurnoverReportData		eau.disabledFunction(smUserId, "TurnoverReportController.generateTurnoverReportData");		public Document generateTurnoverReportData(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("startAsOf") String strStartAsOf, @EISInject("endAsOf") String strEndAsOf, @EISInject("startAsAt") String strStartAsAt, @EISInject("endAsAt") String strEndAsAt, @EISInject("operatingMode") String operatingMode, @EISInject("periodType") String periodType, @EISInject("portfolioCodeList") String portfolioCodeList, @EISInject("testMode") String testMode) throws Exception {
/metamodel/uiresource		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/UIResourceController.java
	/loadUIResource		eau.validateEmptyFunction(smUserId, "UIResourceController.loadUIResource");		public Document loadUIResource(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
/internal/datadebug		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/util/DataDebugController.java
	/dumpMetaXML		eau.validateMetamodelFunctionViaModel(smUserId,"Metamodel.View", MetaModel.getModel().getTable(tableName).getOwnerRole());		public Document dumpMetaXML(Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("tableName") String tableName) throws Exception {
	/dumpMappings		eau.validateMetamodelFunctionViaModel(smUserId,"Metamodel.View", MetaModel.getModel().getTable(tableName).getOwnerRole());		public Document dumpMappings(Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("tableName") String tableName) throws Exception {
/internal/listIBMMQStatus		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/util/ListIBMMQStatus.java
	/getQueueStatus		no entitlement		public Document getQueueStatus() throws Exception {
	/stopAllQueueListener		no entitlement		public Document stopAllQueueListener() throws Exception {
	/startAllQueueListener		no entitlement		public Document startAllQueueListener() throws Exception {
	/startQueueListeber		no entitlement		public Document startQueueListeber(@EISInject("queueName") String queueName) throws Exception {
	/stopQueueListeber		no entitlement		public Document stopQueueListeber(@EISInject("queueName") String queueName) throws Exception {
/utils		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/controllers/util/UtilController.java
	/dumpMetaXML		eau.validateMetamodelFunctionViaModel(smUserId,"Metamodel.View", MetaModel.getModel().getTable(tableName).getOwnerRole());		public Document dumpMetaXML(Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("tableName") String tableName) throws Exception {
	/getProperty		eau.validateEmptyFunction(smUserId, "SystemProperty.view");		public Document getProperty(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("name") String paramName) throws Exception {
	/dumpMappings		eau.validateMetamodelFunctionViaModel(smUserId,"Metamodel.View", MetaModel.getModel().getTable(tableName).getOwnerRole());		public Document dumpMappings(Connection c, @EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject("tableName") String tableName) throws Exception {
/api/v1		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/rest/controllers/DataServiceController.java
	/datamarts		no entitlement		public Response datamarts( @Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "Delegated user id", hidden = true, required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "Guid UUID to track request", required = false) @HeaderParam("guid") @EISInject(type = Type.Header, value = "guid") String guid, @ApiParam(value = "Data martName", required = true) @PathParam("martName") @EISInject(type = Type.ExtraPath) String martName, @ApiParam(value = "Columns E.g. * or column1,column2..", required = true) @QueryParam("fields") @EISInject("fields") String fields, @ApiParam(value = "AsofDate (format YYYY-MM-DD) Note: asof date is mandatory for FactMart") @QueryParam("asof") @EISInject("asof") String asof, @ApiParam(value = "Sorting E.g. ascending order input column name and descending order input -column name (prepend column name with -)") @QueryParam("sort") @EISInject("sort") String sort, @ApiParam(value = "Filter condition leverages FIQL/RSQL standards. E.g. Fund is ABC or Portfolio is DEF and region is not US The filter condition would be represented as: (Fund=ABC,Portfolio=DEF);" + "Region!=US <a href=\"datafilterhelp.html\" target=\"_blank\">Click here</a> for more details\n\nNote: Please input DateTime in UTC Standard E.g. ASAT=2017-07-06T02:10:48.123") @QueryParam("filters") @EISInject("filters") String filters, @ApiParam(value = "Column name") @QueryParam("grouping") @EISInject("grouping") String grouping, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
	/datamarts		no entitlement		public Response datamarts( @Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "Delegated user id", hidden = true, required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "Guid UUID to track request", required = false) @HeaderParam("guid") @EISInject(type = Type.Header, value = "guid") String guid, @ApiParam(value = "Data martName", required = true) @PathParam("martName") @EISInject(type = Type.ExtraPath) String martName, @ApiParam(value = "Columns E.g. * or column1,column2..", required = true) @QueryParam("fields") @EISInject("fields") String fields, @ApiParam(value = "AsofDate (format YYYY-MM-DD) Note: asof date is mandatory for FactMart") @QueryParam("asof") @EISInject("asof") String asof, @ApiParam(value = "Sorting E.g. ascending order input column name and descending order input -column name (prepend column name with -)") @QueryParam("sort") @EISInject("sort") String sort, @ApiParam(value = "Filter condition leverages FIQL/RSQL standards. E.g. Fund is ABC or Portfolio is DEF and region is not US The filter condition would be represented as: (Fund=ABC,Portfolio=DEF);" + "Region!=US <a href=\"datafilterhelp.html\" target=\"_blank\">Click here</a> for more details\n\nNote: Please input DateTime in UTC Standard E.g. ASAT=2017-07-06T02:10:48.123") @QueryParam("filters") @EISInject("filters") String filters, @ApiParam(value = "Column name") @QueryParam("grouping") @EISInject("grouping") String grouping, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
	/datamarts		no entitlement		public Response datamarts( @Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "Delegated user id", hidden = true, required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "Guid UUID to track request", required = false) @HeaderParam("guid") @EISInject(type = Type.Header, value = "guid") String guid, @ApiParam(value = "Data martName", required = true) @PathParam("martName") @EISInject(type = Type.ExtraPath) String martName, @ApiParam(value = "Columns E.g. * or column1,column2..", required = true) @QueryParam("fields") @EISInject("fields") String fields, @ApiParam(value = "AsofDate (format YYYY-MM-DD) Note: asof date is mandatory for FactMart") @QueryParam("asof") @EISInject("asof") String asof, @ApiParam(value = "Sorting E.g. ascending order input column name and descending order input -column name (prepend column name with -)") @QueryParam("sort") @EISInject("sort") String sort, @ApiParam(value = "Filter condition leverages FIQL/RSQL standards. E.g. Fund is ABC or Portfolio is DEF and region is not US The filter condition would be represented as: (Fund=ABC,Portfolio=DEF);" + "Region!=US <a href=\"datafilterhelp.html\" target=\"_blank\">Click here</a> for more details\n\nNote: Please input DateTime in UTC Standard E.g. ASAT=2017-07-06T02:10:48.123") @QueryParam("filters") @EISInject("filters") String filters, @ApiParam(value = "Column name") @QueryParam("grouping") @EISInject("grouping") String grouping, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
/api/v1/data		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/rest/controllers/RestDataServiceController.java
	/query		no entitlement		public Response query( @Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "delegated user id",hidden =true,required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "table name eg :DM_ACCOUNTS", required = true) @QueryParam("tableName") @EISInject("tableName") String tableName, @ApiParam(value = "columns eg :ALL or column1,column2..", required = true) @QueryParam("fields") @EISInject("fields") String fields, @ApiParam(value = "asof data(format YYYY-MM-DD) eg :=bt=2017-06-13;2017-06-14 for BETWEEN Note: Except transactional tables ASOF is mandatory for other tables") @QueryParam("asof") @EISInject("asof") String asof, @ApiParam(value = "sorting field eg :ASOF,-ASAT") @QueryParam("sort") @EISInject("sort") String sort, @ApiParam(value = "filter condition eg :SOURCE=DAN_TEST;SOURCE!=DAN_TEST, ACCOUNT_TYPE=gt=10;ACCOUNT_TYPE=ge=10;\n\nACCOUNT_TYPE=lt=338;" + "ACCOUNT_TYPE=le=338;FUND_CLASS=in=(1,4);FUND_CLASS=out=(1,4,5),SOURCE=isn=, SOURCE=isnn=\n\nNote: ';' stands for AND and ',' stands for OR condition\n\n" + "Use '==' and '<>' for column to column compare eg : SOURCE<>ACCOUNT_TYPE, SOURCE==ACCOUNT_TYPE") @QueryParam("filters") @EISInject("filters") String filters, @ApiParam(value = "column name") @QueryParam("grouping") @EISInject("grouping") String grouping, @ApiParam(value = "flag eg:Y Or N", required = true, allowableValues = ApplicationResources.ALLOWED_VALUES, defaultValue = "N") @QueryParam("flags") @EISInject("flags") String flags, @ApiParam(value = "offset eg: 0,1,2,3..") @QueryParam("offset") @EISInject("offset") String offset, @ApiParam(value = "limit eg: 1,2,3...") @QueryParam("limit") @EISInject("limit") String limit, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
	/load		eau.validateAdminFunction(smUserId, "Metamodel.UploadCategoryData");		public Response load( @Context @EISInject Connection dbCon, @Context @EISInject HttpServletRequest request, @Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "delegated user id", required = false,hidden = true) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.CONTENT_TYPE) String requestContentType, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
/api/v1/metaData		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/rest/controllers/RestMetaDataController.java
	/modelList		no entitlement		public Response modelList(@Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "delegated user id",hidden =true,required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
	/details		no entitlement		public Response details(@Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "delegated user id",hidden =true,required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "table Name eg :DM_ACCOUNTS", required = true) @QueryParam("tableName") @EISInject("tableName") String tableName, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
	/lookUpData		no entitlement		public Response lookUpData(@Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "delegated user id",hidden =true,required = false) @HeaderParam("delegated_user")@EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "List of seperated Element Names eg : ACCOUNT_CURRENCY_CODE,ASSET_CLASS,...", required = true) @QueryParam("elementNames")@EISInject("elementNames") String elementNames, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
	/queryDictionary		no entitlement		public Response queryDictionary( @Context @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @ApiParam(value = "delegated user id",hidden =true,required = false) @HeaderParam("delegated_user") @EISInject(type = Type.Header, value = "delegated_user") String delegatedUser, @ApiParam(value = "valid table name eg :ELEMENT", required = true, allowableValues = ApplicationResources.DICTIONARY_TABLES, defaultValue = "ACCOUNT_STATUS") @QueryParam("tableName") @EISInject("tableName") String tableName, @ApiParam(value = "valid columns eg :ALL or column1,column2..", required = true) @QueryParam("fields") @EISInject("fields") String fields, @ApiParam(value = "valid sorting field eg :ASOF,-ASAT") @QueryParam("sort") @EISInject("sort") String sort, @ApiParam(value = "filter condition eg :STATUS=ACTIVE;STATUS!=ACTIVE,LENGTH=gt=10;LENGTH=ge=10;\n\nLENGTH=lt=12;" + "LENGTH=le=223;DATA_TYPE=in=(Integer,String);DATA_TYPE=out=(Integer,String),STATUS=isn=,STATUS=isnn=\n\nNote: ';' stands for AND and ',' stands for OR condition\n\n" + "Use '==' and '<>' for column to column compare eg : STATUS<>DATA_TYPE, STATUS==DATA_TYPE") @QueryParam("filters") @EISInject("filters") String filters, @ApiParam(value = "valid flag eg:Y Or N", required = true, allowableValues = ApplicationResources.ALLOWED_VALUES, defaultValue = "N") @QueryParam("flags") @EISInject("flags") String flags, @Context @EISInject(type = EISInject.Type.Header, value = HttpHeaders.ACCEPT) String responseContentType, @Context @EISInject HttpServletResponse response) throws Exception {
/NDMServiceCaller		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/CallNdmService.java
	/sendFile		eau.validateEmptyFunction(smUserId, "CallNdmService.sendFile");		public void sendFile(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws ServletException, Exception {
/classification		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/ClassificationSchemaService.java
	/list		eau.validateEmptyFunction(smUserId, "ClassificationSchemaService.view");		public Document list(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getClientList		eau.validateEmptyFunction(smUserId, "ClassificationSchemaService.view");		public Document getClientList(@EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception{
	/detail		eau.validateEmptyFunction(smUserId, "ClassificationSchemaService.view");		public Document detail(Document inputDocument, @EISInject(type = EISInject.Type.ExtraPath) String schemaCode, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/predefinedSchemas		eau.validateEmptyFunction(smUserId, "ClassificationSchemaService.view");		public Document predefinedSchemas(Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/executeActions		eau.disabledFunction(smUserId, "ClassificationSchemaService.executeActions");		public Document executeActions(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String smUserId) throws Exception {
	/maxClassificationLevel		no entitlement		public Document maxClassificationLevel() throws Exception {
/CopyToNetworkService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/CopyToNetworkService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/martelementoriginservice		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/DatamartElementOriginService.java
	/elementOrigin		eau.validateMetamodelFunctionViaModel(userId,"Metamodel.View", MetaModel.getModel().getDataMart(martName).getOwnerRole());		public Document elementOrigin(@EISInject Connection connection, @EISInject(type = EISInject.Type.ExtraPath) String martName, @EISInject(type = Type.Header, value = "sm_user") String userId) throws Exception {
	/remoteelementOrigin		eau.validateMetamodelFunctionViaModel(userId,"Metamodel.View", MetaModel.getModel().getDataMart(martName).getOwnerRole());		public Document remoteelementOrigin(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userId) throws Exception {
	/elementConsumption		eau.validateMetamodelFunctionViaModel(smUserId,"Metamodel.View", MetaModel.getModel().getDataMart(martName).getOwnerRole());		public Document elementConsumption(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument, @EISInject Connection connection) throws Exception {
	/executeQuery		eau.validateEmptyFunction(smUserId, "DatamartElementOriginService.executeQuery");		public Document executeQuery(@EISInject(type = Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/parentMartPath		eau.validateMetamodelFunctionViaModel(smUserId,"Metamodel.View", MetaModel.getModel().getDataMart(martName).getOwnerRole());		public Document parentMartPath(@EISInject(type = Type.Header, value = "sm_user") String smUserId, @EISInject Connection connection, Document inputDocument) throws Exception {
/FTPService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/FTPService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/invoker		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/GeneralESPServiceInvoker.java
	/admin		eau.validateEmptyFunction(userId, "GeneralESPServiceInvoker.admin");		public Document admin(@EISInject HttpServletRequest request, @EISInject(type = EISInject.Type.Header, value = "sm_user") String userId, @EISInject(type = EISInject.Type.ExtraPath) String appendURL, Document inputDocument) throws Exception {
/httpServices		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/GenericHttpService.java
	/getRKSESPXREFData		eau.validateEmptyFunction(smUserId, "GenericHttpService.getRKSESPXREFData");		public void getRKSESPXREFData(@EISInject Connection connection, @EISInject Session session, @EISInject HttpServletRequest request, @EISInject HttpServletResponse response, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
/IDeliverService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/IDeliverService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/ivservice		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/IVServices.java
	/getEleLookup		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getEleLookup(@EISInject("element") String element, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, Document inputDocument, @EISInject("lookupName") String lookupName, @EISInject("concatDescription") String concatDescription) throws Exception {
	/getQuickSearchEleLookup		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getQuickSearchEleLookup(@EISInject("element") String element, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, Document inputDocument, @EISInject("lookupName") String lookupName, @EISInject("concatDescription") String concatDescription) throws Exception {
	/getAccount		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getAccount(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getPreferredBenchmarks		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getPreferredBenchmarks(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/genericLookupService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document genericLookupService(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getReturnType		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getReturnType(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getPerformanceSchemeCode		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getPerformanceSchemeCode(Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getPortfolioWithCondition		no entitlement		// public Document getPortfolioWithCondition(@EISInject("element") String // code,@EISInject("name") String desc, // @EISInject("entity") String category, @EISInject("account_type") String // cond, // Document inputDocument) throws Exception {
	/getEntityDriverData		no entitlement		public Document getEntityDriverData(@EISInject("driver") String driver, @EISInject("driverDesc") String driverDesc, @EISInject("driverCat") String driverCat, @EISInject("criteria") String criteria, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getAccountGroupReferenceData		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getAccountGroupReferenceData(@EISInject("element") String code, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getCustomFundDriverData		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getCustomFundDriverData(@EISInject Connection connection, Document inputDocument, @EISInject("ivname") String ivName, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/FundListService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document FundListService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/FundTreeService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document FundTreeService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/FundGroupService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document FundGroupService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/ManageFundGroupService		eau.validateAdminFunction(smUserId, "Metamodel.PublishIV");		public Document ManageFundGroupService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/deleteCoreView		eau.validateAdminFunction(smUserId, "Metamodel.PublishIV");		public Document deleteCoreView(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/exportCoreViews		eau.validateAdminFunction(smUserId, "Dashboard.InteractiveViews");		public Document exportCoreViews(@EISInject Connection connection, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/createCoreView		eau.validateAdminFunction(smUserId, "Metamodel.PublishIV");		public Document createCoreView(@EISInject Connection connection, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/createCoreViewManually		eau.validateAdminFunction(smUserId, "Metamodel.PublishIV");		public Document createCoreViewManually(@EISInject Connection connection, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/createCoreViewManuallyJson		eau.validateAdminFunction(smUserId, "Metamodel.PublishIV");		public Document createCoreViewManuallyJson(@EISInject Connection connection, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, Document inputDocument) throws Exception {
	/getIVMyssDefintion		eau.validateAdminFunction(smUserId, "Dashboard.InteractiveViews");		public Document getIVMyssDefintion(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getIVMyssDefintionJson		eau.validateAdminFunction(smUserId, "Dashboard.InteractiveViews");		public Document getIVMyssDefintionJson(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/publicIVInfo		eau.validateAdminFunction(smUserId, "Dashboard.InteractiveViews");		public Document publicIVInfo(@EISInject Connection connection, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.ExtraPath) String datamartName) throws Exception {
	/publicIVInfoByViewName		eau.validateAdminFunction(smUserId, "Dashboard.InteractiveViews");		public Document publicIVInfoByViewName(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/GenericDataService		no entitlement		public Document GenericDataService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId, @EISInject(type = EISInject.Type.Parameter, value = "foo") String sessionId, @EISInject HttpServletResponse resp) throws Exception {
	/viewSearchOptions		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document viewSearchOptions(@EISInject Connection connection, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/viewSearch		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document viewSearch(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/FilterService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document FilterService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/MetaDataService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document MetaDataService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/findMart		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document findMart(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/findIV		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document findIV(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getClassifications		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getClassifications(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getTags		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getTags(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getEspAdminFunctions		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getEspAdminFunctions(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/cascadeParameterService		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document cascadeParameterService(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/listViews		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document listViews(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getAllViews		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getAllViews(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/viewProperties		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document viewProperties(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
	/getContentArea		eau.validateEmptyFunction(smUserId, "Dashboard.InteractiveViews");		public Document getContentArea(@EISInject Connection connection, Document inputDocument, @EISInject(type = EISInject.Type.Header, value = "sm_user") String smUserId) throws Exception {
/monitorservice		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/MonitorService.java
	/manualRefresh		eau.validateMetamodelFunctionViaModel(userId,  "Metamodel.UploadCategoryData", MetaModel.getModel().getDataMart(martName).getOwnerRole());		public Document manualRefresh(@EISInject Connection connection, @EISInject Session session, @EISInject(type = Type.Header, value = "sm_user") String userId, Document inputDocument) throws Exception {
/MQMessageSenderService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/MQMessageSenderService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/NDMService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/NdmService.java
	/sendFile		no entitlement		public void sendFile(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
/PGPEncryptionService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/PGPEncryptionService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/SFTPService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/SFTPService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/invokeGet		no entitlement		public void invokeGet(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
	/split		no entitlement		public void split(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/VoltageEncryptionService		c:/workspace/beacon/esp_core/src/modules/helium-web/src/com/ssc/eis/helium/services/VoltageEncryptionService.java
	/_invoke		no entitlement		public void _invoke(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws ServletException {
	/validate		no entitlement		public void validate(HttpServletRequest request, HttpServletResponse response) throws ServletException {
/amaSlaMetaInfo		c:/workspace/beacon/esp_web/src/modules/esp-monitor/src/com/ssc/eis/helium/monitor/controllers/AMASlaController.java
	/postSLAMetaData		no entitlement		public void postSLAMetaData() throws Exception {
/databaseDeployment		c:/workspace/beacon/esp_web/src/modules/esp-monitor/src/com/ssc/eis/helium/monitor/controllers/ESPSystemObjectMaintenace.java
	/createDBObjectChangeSet		no entitlement		public void createDBObjectChangeSet( @EISInject("objectName") String objectName, @EISInject("objectType") String objectType, @EISInject("sqlClob") String sqlClob) throws Exception {
	/executeDBObjectChangeSet		no entitlement		public void executeDBObjectChangeSet( @EISInject("changeSetId") String changeSetId, @EISInject("environment") String env) throws Exception {
/interchange		c:/workspace/beacon/esp_web/src/modules/esp-monitor/src/com/ssc/eis/helium/monitor/controllers/InterchangeController.java
	/login		no entitlement		public String login(@EISInject HttpServletRequest request, @EISInject HttpServletResponse response) throws Exception {
/comments		c:/workspace/beacon/esp_web/src/modules/esp-monitor/src/com/ssc/eis/helium/monitor/controllers/MonitorCommentControler.java
	/getComment		no entitlement		public Document getComment(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/addComment		no entitlement		public Document addComment(@EISInject Connection connection, Document inputDocument, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
/envurl		c:/workspace/beacon/esp_web/src/modules/esp-monitor/src/com/ssc/eis/helium/monitor/controllers/MonitorEnvurlController.java
	/getClientName		no entitlement		public Document getClientName(@EISInject Connection connection) throws Exception { 
/monitor/dataService		c:/workspace/beacon/esp_web/src/modules/esp-monitor/src/com/ssc/eis/helium/monitor/controllers/MonitorStatusController.java
	/getStatusData		no entitlement		public Document getStatusData() throws Exception {
	/getSLAStatusData		no entitlement		public Document getSLAStatusData() throws Exception {
	/getViewMetaData		no entitlement		public Document getViewMetaData() throws Exception {
	/getStatusMetaData		no entitlement		public Document getStatusMetaData(Document document) throws Exception{
	/getSLAStatusMetaData		no entitlement		public Document getSLAStatusMetaData(Document document) throws Exception {
	/runCheck		no entitlement		public Document runCheck(@EISInject("env") String env, @EISInject("checkName") String checkName, @EISInject("params") String params, @EISInject(type = Type.Header, value = "sm_user") String userid) throws Exception {
	/runCheckAndLog		no entitlement		public Document runCheckAndLog(@EISInject("env") String env, @EISInject("checkName") String checkName, @EISInject("params") String params, @EISInject("userName") String userName, @EISInject(type = Type.Header, value = "sm_user") String userid, @EISInject Connection connection) throws Exception {
	/runDeliverable		no entitlement		public Document runDeliverable(@EISInject("env") String env, @EISInject("region") String region, @EISInject("delivName") String delivName) throws Exception {
	/killDBSession		no entitlement		public Document killDBSession(@EISInject("env") String env, @EISInject("checkName") String checkName, Document document) throws Exception {
	/executeUpdate		no entitlement		public Document executeUpdate(@EISInject("env") String env, @EISInject("checkName") String checkName , @EISInject(type = Type.Header, value = "sm_user") String userid, Document document) throws Exception {
	/replayFailedFeeds		no entitlement		public Document replayFailedFeeds(@EISInject("env") String env, @EISInject("checkName") String checkName, @EISInject(type = Type.Header, value = "sm_user") String userid, Document document) throws Exception {
	/toggleQueueStatus		no entitlement		public Document toggleQueueStatus(@EISInject("env") String env, @EISInject("checkName") String checkName, @EISInject(type = Type.Header, value = "sm_user") String userid, Document document) throws Exception {
	/replayFailures		no entitlement		public Document replayFailures(@EISInject("env") String env, @EISInject("checkName") String checkName, @EISInject(type = Type.Header, value = "sm_user") String userid, Document document) throws Exception {
	/sendAutosysJobEmail		no entitlement		public Document sendAutosysJobEmail(@EISInject("env") String environment, @EISInject("action") String action, @EISInject("userName") String userName) throws Exception {
	/sendIndividualAutosysJobEmail		no entitlement		public Document sendIndividualAutosysJobEmail(@EISInject("env") String environment, @EISInject("action") String action,Document document, @EISInject("userName") String userName) throws Exception {
	/getBalanceServerList		no entitlement		public Document getBalanceServerList(Document inputDocument, @EISInject Connection connection) throws Exception {
	/updateBalanceServerStatus		no entitlement		public Document updateBalanceServerStatus(Document inputDocument, @EISInject Connection connection) throws Exception {
